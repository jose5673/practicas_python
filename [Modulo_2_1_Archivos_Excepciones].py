# -*- coding: utf-8 -*-

# =================================================================================================
# üìã FASE 2: HERRAMIENTAS ESENCIALES
# M√≥dulo 2.1: Manejo de Archivos y Excepciones
# =================================================================================================
#
# Python para Automatizaci√≥n Industrial y Desarrollo Web
#
# Autor: GitHub Copilot
# Fecha: 30 de junio de 2025
#
# -------------------------------------------------------------------------------------------------
#
# **ACERCA DE ESTE SCRIPT:**
#
# Este archivo define la secuencia de aprendizaje y los conceptos clave para el M√≥dulo 2.1.
# Sirve como una gu√≠a estructurada para entender c√≥mo Python interact√∫a con el sistema de
# archivos y c√≥mo gestiona los errores en tiempo de ejecuci√≥n. Dominar estos conceptos es
# esencial para crear aplicaciones robustas y fiables en cualquier campo, especialmente en la
# automatizaci√≥n industrial, donde la integridad de los datos y la estabilidad del
# software son cr√≠ticas.
#
# -------------------------------------------------------------------------------------------------
#
# **SECUENCIA DE ENSE√ëANZA DETALLADA:**
#
# ---
#
# ### PARTE 1: MANEJO DE EXCEPCIONES (LA RED DE SEGURIDAD)
#
# **Concepto Clave:** Los errores ocurren. En lugar de dejar que el programa se caiga,
# los "atrapamos" y decidimos qu√© hacer.
#
# 1.  **¬øQu√© es una Excepci√≥n?**
#     -   Introducci√≥n a los errores en tiempo de ejecuci√≥n (ej. `ZeroDivisionError`, `FileNotFoundError`).
#     -   Diferencia entre errores de sintaxis (que impiden que el programa corra) y excepciones.
#
# 2.  **El Bloque `try...except`:**
#     -   Sintaxis b√°sica para "intentar" ejecutar un c√≥digo que podr√≠a fallar.
#     -   Atrapar excepciones espec√≠ficas para manejar diferentes tipos de errores.
#     -   Uso de `as` para obtener el objeto de la excepci√≥n y ver el mensaje de error.
#     -   Atrapar m√∫ltiples excepciones en un solo bloque `except`.
#
# 3.  **Los Bloques `else` y `finally`:**
#     -   `else`: C√≥digo que se ejecuta solo si el bloque `try` **no** lanz√≥ ninguna excepci√≥n.
#     -   `finally`: C√≥digo que se ejecuta **siempre**, haya habido un error o no. Ideal para
#       acciones de limpieza, como cerrar archivos o conexiones de red.
#
# 4.  **Lanzar Excepciones (`raise`):**
#     -   C√≥mo y por qu√© lanzar nuestras propias excepciones para se√±alar condiciones de
#       error espec√≠ficas en nuestro c√≥digo (ej. `raise ValueError("La presi√≥n no puede ser negativa")`).
#
# ---
#
# ### PARTE 2: MANEJO DE ARCHIVOS (LA MEMORIA PERSISTENTE)
#
# **Concepto Clave:** Los programas necesitan leer y escribir informaci√≥n que perdure
# m√°s all√° de su ejecuci√≥n.
#
# 1.  **Lectura de Archivos de Texto (`.txt`):**
#     -   La forma moderna y segura: `with open('archivo.txt', 'r') as f:`.
#     -   Explicaci√≥n de por qu√© `with` es preferible (cierra el archivo autom√°ticamente).
#     -   M√©todos: `.read()`, `.readline()`, `.readlines()`.
#
# 2.  **Escritura en Archivos de Texto:**
#     -   Modo escritura (`'w'`): Sobrescribe el archivo si existe.
#     -   Modo a√±adir (`'a'`): Agrega contenido al final del archivo.
#     -   Creaci√≥n de archivos que no existen.
#
# 3.  **Trabajando con Rutas de Archivos:**
#     -   Uso de la librer√≠a `pathlib` (el enfoque moderno) para manejar rutas de forma
#       independiente del sistema operativo.
#     -   Diferencia entre rutas relativas y absolutas.
#
# ---
#
# ### PARTE 3: DATOS ESTRUCTURADOS (JSON Y CSV)
#
# **Concepto Clave:** No todos los datos son texto plano. JSON y CSV son est√°ndares para
# intercambiar informaci√≥n de forma estructurada.
#
# 1.  **M√≥dulo `json`:**
#     -   ¬øQu√© es JSON? (JavaScript Object Notation). Su similitud con los diccionarios de Python.
#     -   `json.dump()`: Escribir un objeto Python (diccionario, lista) a un archivo JSON.
#     -   `json.load()`: Leer un archivo JSON y convertirlo en un objeto Python.
#     -   **Caso de uso industrial:** Guardar la configuraci√≥n de un dispositivo o los par√°metros de un proceso.
#
# 2.  **M√≥dulo `csv`:**
#     -   ¬øQu√© es CSV? (Comma-Separated Values). Formato tabular ideal para hojas de c√°lculo.
#     -   `csv.writer`: Escribir datos (listas de listas) en un archivo CSV.
#     -   `csv.reader`: Leer datos de un archivo CSV.
#     -   `csv.DictWriter` y `csv.DictReader`: Trabajar con CSV usando diccionarios.
#     -   **Caso de uso industrial:** Exportar lecturas de sensores tomadas a lo largo del tiempo.
#
# ---
#
# ### PARTE 4: LOGGING (LA CAJA NEGRA DE TU APLICACI√ìN)
#
# **Concepto Clave:** En lugar de usar `print()` para depurar, el logging ofrece un sistema
# robusto, configurable y est√°ndar para registrar eventos.
#
# 1.  **M√≥dulo `logging`:**
#     -   Configuraci√≥n b√°sica: `logging.basicConfig()`.
#     -   Niveles de severidad: `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`.
#     -   C√≥mo registrar mensajes a cada nivel.
#     -   **Caso de uso industrial:** Registrar un `INFO` cuando se establece conexi√≥n con un PLC,
#       un `WARNING` si un valor de sensor est√° fuera del rango normal, y un `ERROR` si la
#       conexi√≥n se pierde.
#     -   Configurar el logging para que escriba a un archivo en lugar de la consola.
#
# -------------------------------------------------------------------------------------------------
#
# **PROYECTO INTEGRADOR DEL M√ìDULO:**
#
# Crearemos un script que simule la lectura de datos de varios sensores.
# 1.  La configuraci√≥n de los sensores (IDs, tipo, rangos) se leer√° de un archivo `config.json`.
# 2.  El script intentar√° leer los valores de cada sensor. Si un sensor da un error (simulado),
#     se manejar√° la excepci√≥n.
# 3.  Todas las lecturas exitosas se guardar√°n en un archivo `data.csv` con timestamp.
# 4.  Todos los eventos (lecturas correctas, errores, inicio/fin del script) se registrar√°n
#     en un archivo `log.txt` usando el m√≥dulo `logging`.
#
# =================================================================================================

"""
================================================================================
PARTE 1: MANEJO DE EXCEPCIONES (LA RED DE SEGURIDAD)
================================================================================
"""

# ¬øQu√© es una excepci√≥n?
# ----------------------------------------------------------------------------
# Una excepci√≥n es un evento que ocurre durante la ejecuci√≥n de un programa y que
# interrumpe el flujo normal de las instrucciones. Por ejemplo, intentar dividir
# por cero, acceder a un archivo que no existe, o convertir una cadena no num√©rica
# a entero.

# Ejemplo de excepci√≥n:
try:
    resultado = 10 / 0
except ZeroDivisionError as e:
    print(f"‚ùå Error: {e}")

# Diferencia entre error de sintaxis y excepci√≥n:
# - Error de sintaxis: impide que el programa se ejecute (ej: print('Hola)
# - Excepci√≥n: ocurre durante la ejecuci√≥n (ej: 1/0)

# ----------------------------------------------------------------------------
# El bloque try...except
# ----------------------------------------------------------------------------
try:
    archivo = open('no_existe.txt', 'r')
except FileNotFoundError as e:
    print(f"‚ùå Archivo no encontrado: {e}")
else:
    print("‚úÖ Archivo abierto correctamente")
    archivo.close()
finally:
    print("üîî Fin del intento de abrir archivo")

# Puedes capturar varias excepciones:
try:
    x = int(input("Introduce un n√∫mero: "))
    y = 10 / x
except ValueError:
    print("‚ùå Debes introducir un n√∫mero v√°lido.")
except ZeroDivisionError:
    print("‚ùå No se puede dividir por cero.")

# Lanzar tus propias excepciones:
def leer_presion(valor):
    if valor < 0:
        raise ValueError("La presi√≥n no puede ser negativa")
    return valor

try:
    leer_presion(-5)
except ValueError as e:
    print(f"‚ùå Excepci√≥n personalizada: {e}")

"""
================================================================================
PARTE 2: MANEJO DE ARCHIVOS (LA MEMORIA PERSISTENTE)
================================================================================
"""

# Lectura y escritura de archivos de texto
# ----------------------------------------------------------------------------
# Forma moderna y segura:
with open('ejemplo.txt', 'w') as f:
    f.write("L√≠nea 1\nL√≠nea 2\n")

with open('ejemplo.txt', 'r') as f:
    contenido = f.read()
    print(f"üìÑ Contenido del archivo:\n{contenido}")

# A√±adir contenido:
with open('ejemplo.txt', 'a') as f:
    f.write("L√≠nea 3\n")

# Leer l√≠nea por l√≠nea:
with open('ejemplo.txt', 'r') as f:
    for linea in f:
        print(f"‚û°Ô∏è {linea.strip()}")

# Uso de pathlib para rutas
from pathlib import Path
ruta = Path('ejemplo.txt')
print(f"üìÅ Ruta absoluta: {ruta.resolve()}")

"""
================================================================================
PARTE 3: DATOS ESTRUCTURADOS (JSON Y CSV)
================================================================================
"""

# JSON
import json
config = {"sensor": "temp1", "rango": [0, 100]}
with open('config.json', 'w') as f:
    json.dump(config, f)

with open('config.json', 'r') as f:
    datos = json.load(f)
    print(f"üîß Configuraci√≥n cargada: {datos}")

# CSV
import csv
datos = [["sensor", "valor"], ["temp1", 23.5], ["pres1", 1.2]]
with open('datos.csv', 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerows(datos)

with open('datos.csv', 'r') as f:
    reader = csv.reader(f)
    for fila in reader:
        print(f"üìä {fila}")

"""
================================================================================
PARTE 4: LOGGING (LA CAJA NEGRA DE TU APLICACI√ìN)
================================================================================
"""

import logging
logging.basicConfig(filename='log.txt', level=logging.INFO,
                    format='%(asctime)s %(levelname)s: %(message)s')
logging.info('‚úÖ Inicio del script')
logging.warning('‚ö†Ô∏è Valor fuera de rango')
logging.error('‚ùå Error de conexi√≥n con PLC')

print("Consulta el archivo log.txt para ver los eventos registrados.")

"""
================================================================================
SECCI√ìN EXTRA: REFUERZO TE√ìRICO Y PR√ÅCTICO
================================================================================
"""

# =============================
# 1. MANEJO DE EXCEPCIONES
# =============================

# ¬øPor qu√© es vital en la industria?
# ----------------------------------------------------------------------------
# Imagina un sistema de monitoreo de presi√≥n en una caldera industrial. Si ocurre un error
# (por ejemplo, un sensor desconectado), el sistema debe registrar el evento, notificar y
# continuar funcionando de forma segura, no simplemente detenerse.

# Analog√≠a: El try...except es como el paraca√≠das de emergencia de un avi√≥n: no lo usas siempre,
# pero si algo falla, puede salvar tu misi√≥n (¬°y tu vida!).

# Buenas pr√°cticas:
# - Captura solo las excepciones que esperas y puedes manejar.
# - No uses except sin especificar el tipo de excepci√≥n, salvo en scripts de depuraci√≥n.
# - Usa finally para liberar recursos (cerrar archivos, conexiones, etc.).
# - Documenta por qu√© capturas cada excepci√≥n.

# Errores comunes:
# - Olvidar cerrar archivos (usa with siempre que puedas).
# - Capturar Exception sin control (puede ocultar bugs graves).
# - No registrar el error (usa logging, no solo print).

# Ejemplo industrial:
try:
    # Simulaci√≥n: lectura de sensor
    valor = float(input("Introduce la presi√≥n del tanque (bar): "))
    if valor < 0:
        raise ValueError("Presi√≥n negativa detectada. ¬°Revisar sensor!")
    print(f"Presi√≥n registrada: {valor} bar")
except ValueError as e:
    logging.error(f"Lectura inv√°lida de presi√≥n: {e}")
    print(f"‚ö†Ô∏è Error en la lectura: {e}")
else:
    print("‚úÖ Lectura exitosa.")
finally:
    print("üîî Fin del ciclo de lectura de presi√≥n.")

# Preguntas de reflexi√≥n:
# 1. ¬øQu√© pasar√≠a si no capturamos la excepci√≥n ValueError?
# 2. ¬øPor qu√© es mejor registrar el error que solo mostrarlo por pantalla?

# =============================
# 2. MANEJO DE ARCHIVOS
# =============================

# Advertencia: En sistemas industriales, nunca sobrescribas archivos cr√≠ticos sin backup.
# Usa siempre modos de apertura seguros y verifica la existencia del archivo antes de escribir.

# Ejemplo industrial:
# Guardar logs de temperatura cada minuto en un archivo CSV, a√±adiendo una nueva l√≠nea cada vez.
import time
from datetime import datetime

def registrar_temperatura(valor):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open('registro_temp.csv', 'a', newline='') as f:
        writer = csv.writer(f)
        writer.writerow([timestamp, valor])
    logging.info(f"Temperatura registrada: {valor} ¬∞C a las {timestamp}")

# Simulaci√≥n de registro peri√≥dico (descomenta para probar en entorno real):
# for i in range(3):
#     temp = 20 + i  # Simulaci√≥n de lectura
#     registrar_temperatura(temp)
#     time.sleep(1)

# Pregunta de reflexi√≥n:
# ¬øPor qu√© es importante registrar la fecha y hora junto con el valor?

# =============================
# 3. JSON Y CSV EN AUTOMATIZACI√ìN
# =============================

# Caso real: Configuraci√≥n de sensores desde un archivo JSON
configuracion = {
    "sensores": [
        {"id": "T1", "tipo": "temperatura", "rango": [0, 100]},
        {"id": "P1", "tipo": "presion", "rango": [0, 10]}
    ]
}
with open('config_sensores.json', 'w') as f:
    json.dump(configuracion, f, indent=4)

with open('config_sensores.json', 'r') as f:
    conf = json.load(f)
    for sensor in conf["sensores"]:
        print(f"üîé Sensor {sensor['id']} ({sensor['tipo']}), rango: {sensor['rango']}")

# Errores comunes:
# - Olvidar el indent en json.dump (dificulta la lectura humana).
# - No manejar excepciones al leer archivos corruptos o inexistentes.

# =============================
# 4. LOGGING AVANZADO
# =============================

# Buenas pr√°cticas:
# - Usa diferentes niveles seg√∫n la gravedad (INFO, WARNING, ERROR, CRITICAL).
# - Incluye siempre timestamp y contexto en los logs.
# - No uses print para eventos importantes en producci√≥n.

# Ejemplo de logging con contexto:
def log_evento_sensor(sensor_id, valor, estado):
    mensaje = f"Sensor {sensor_id}: valor={valor}, estado={estado}"
    if estado == "OK":
        logging.info(mensaje)
    elif estado == "FUERA DE RANGO":
        logging.warning(mensaje)
    else:
        logging.error(mensaje)

# log_evento_sensor("T1", 105, "FUERA DE RANGO")
# log_evento_sensor("P1", 5, "OK")

# Pregunta de reflexi√≥n:
# ¬øPor qu√© es √∫til diferenciar los niveles de logging?

# =============================
# 5. ERRORES FRECUENTES Y C√ìMO EVITARLOS
# =============================

# - No validar datos antes de procesarlos (usa try/except y validaciones previas).
# - No cerrar archivos (usa with siempre).
# - No registrar eventos cr√≠ticos (usa logging).
# - Sobrescribir archivos importantes accidentalmente (verifica antes de escribir).

# =============================
# 6. AUTOEVALUACI√ìN R√ÅPIDA
# =============================

# 1. ¬øQu√© diferencia hay entre except Exception y except ValueError?
# 2. ¬øPor qu√© es preferible usar with para abrir archivos?
# 3. ¬øC√≥mo registrar√≠as un error cr√≠tico en el log?
# 4. ¬øQu√© ventajas tiene usar JSON frente a TXT plano para configuraciones?
# 5. ¬øQu√© ocurre si abres un archivo en modo 'w' y ya existe?

# =============================
# 7. RESUMEN VISUAL
# =============================

# ‚ö†Ô∏è try/except/finally = Red de seguridad
# üìÑ with open(...) = Lectura/escritura segura
# üîß json/csv = Datos estructurados y portables
# üìù logging = Bit√°cora profesional
# üö® Valida, documenta y registra todo
