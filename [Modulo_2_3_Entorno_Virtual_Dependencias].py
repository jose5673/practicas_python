"""
üéØ M√ìDULO 2.3: ENTORNO VIRTUAL Y GESTI√ìN DE DEPENDENCIAS
üìö PYTHON PARA AUTOMATIZACI√ìN INDUSTRIAL
==================================================

üìã OBJETIVOS DE APRENDIZAJE:
‚Ä¢ Comprender la importancia de los entornos virtuales en Python
‚Ä¢ Dominar venv para crear y gestionar entornos aislados
‚Ä¢ Gestionar dependencias con pip y requirements.txt
‚Ä¢ Estructurar proyectos Python de forma profesional
‚Ä¢ Aplicar buenas pr√°cticas de desarrollo industrial

üéØ PROYECTO DEL M√ìDULO: Setup completo de proyecto de automatizaci√≥n

‚ö†Ô∏è  ADVERTENCIA CR√çTICA:
Sin entornos virtuales, tus proyectos pueden sufrir conflictos de dependencias
que causen fallos inesperados en producci√≥n. Es FUNDAMENTAL dominar este tema.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üìñ SECCI√ìN 1: CONCEPTOS FUNDAMENTALES DE ENTORNOS VIRTUALES
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

"""
üîç ¬øQU√â ES UN ENTORNO VIRTUAL?

üè≠ ANALOG√çA INDUSTRIAL:
Imagina una f√°brica donde cada l√≠nea de producci√≥n necesita herramientas espec√≠ficas.
Si mezclamos todas las herramientas en un almac√©n com√∫n:
- Las herramientas se pierden
- Versiones incompatibles causan problemas
- Un cambio afecta todas las l√≠neas

Un ENTORNO VIRTUAL es como tener un almac√©n dedicado para cada l√≠nea de producci√≥n:
- Herramientas espec√≠ficas para cada proyecto
- Versiones controladas
- Aislamiento total entre proyectos

üéØ DEFINICI√ìN T√âCNICA:
Un entorno virtual es un directorio que contiene una instalaci√≥n independiente
de Python con sus propios paquetes, separado del sistema principal.

üìä BENEFICIOS CLAVE:
‚úÖ Aislamiento de dependencias
‚úÖ Control de versiones de paquetes
‚úÖ Reproducibilidad del entorno
‚úÖ Prevenci√≥n de conflictos
‚úÖ Facilita el deployment
‚úÖ Permite m√∫ltiples versiones de Python
"""

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üìñ SECCI√ìN 2: TRABAJANDO CON VENV
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

"""
üõ†Ô∏è VENV: EL GESTOR DE ENTORNOS VIRTUALES NATIVO

üîß COMANDOS FUNDAMENTALES (Windows PowerShell):

1Ô∏è‚É£ CREAR ENTORNO VIRTUAL:
   python -m venv nombre_entorno
   
2Ô∏è‚É£ ACTIVAR ENTORNO (Windows):
   nombre_entorno\Scripts\Activate.ps1
   
3Ô∏è‚É£ DESACTIVAR ENTORNO:
   deactivate
   
4Ô∏è‚É£ VERIFICAR ENTORNO ACTIVO:
   where python
   python --version

‚ö†Ô∏è  IMPORTANTE EN WINDOWS:
Si tienes problemas con PowerShell, usa:
nombre_entorno\Scripts\activate.bat

üéØ ESTRUCTURA DE UN ENTORNO VIRTUAL:
mi_proyecto/
‚îú‚îÄ‚îÄ Scripts/              # Ejecutables (Windows)
‚îÇ   ‚îú‚îÄ‚îÄ activate.bat      # Activador batch
‚îÇ   ‚îú‚îÄ‚îÄ Activate.ps1      # Activador PowerShell
‚îÇ   ‚îú‚îÄ‚îÄ python.exe        # Int√©rprete Python
‚îÇ   ‚îî‚îÄ‚îÄ pip.exe          # Gestor de paquetes
‚îú‚îÄ‚îÄ Lib/                 # Librer√≠as instaladas
‚îÇ   ‚îî‚îÄ‚îÄ site-packages/   # Paquetes de terceros
‚îú‚îÄ‚îÄ Include/             # Headers C/C++
‚îî‚îÄ‚îÄ pyvenv.cfg          # Configuraci√≥n del entorno
"""

import subprocess
import sys
import os
from pathlib import Path

def verificar_entorno_virtual():
    """
    üîç Funci√≥n para verificar si estamos en un entorno virtual
    
    Returns:
        bool: True si estamos en un entorno virtual
    """
    # M√©todo 1: Variable de entorno VIRTUAL_ENV
    if os.environ.get('VIRTUAL_ENV'):
        print("‚úÖ Entorno virtual detectado via VIRTUAL_ENV")
        print(f"üìç Ruta: {os.environ['VIRTUAL_ENV']}")
        return True
    
    # M√©todo 2: Comparar sys.prefix con sys.base_prefix
    if sys.prefix != sys.base_prefix:
        print("‚úÖ Entorno virtual detectado via sys.prefix")
        print(f"üìç Entorno: {sys.prefix}")
        print(f"üìç Sistema: {sys.base_prefix}")
        return True
    
    print("‚ùå No est√°s en un entorno virtual")
    return False

def mostrar_info_python():
    """
    üìä Muestra informaci√≥n detallada del entorno Python actual
    """
    print("=" * 60)
    print("üêç INFORMACI√ìN DEL ENTORNO PYTHON")
    print("=" * 60)
    
    print(f"üîñ Versi√≥n Python: {sys.version}")
    print(f"üìç Ejecutable: {sys.executable}")
    print(f"üìç Ruta del sistema: {sys.prefix}")
    print(f"üìç Ruta base: {sys.base_prefix}")
    
    # Verificar si estamos en entorno virtual
    verificar_entorno_virtual()
    
    # Mostrar rutas de m√≥dulos
    print(f"üìö Rutas de m√≥dulos:")
    for i, path in enumerate(sys.path[:5]):  # Primeras 5 rutas
        print(f"   {i+1}. {path}")
    
    if len(sys.path) > 5:
        print(f"   ... y {len(sys.path)-5} rutas m√°s")

# Ejemplo de uso
if __name__ == "__main__":
    mostrar_info_python()

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üìñ SECCI√ìN 3: GESTI√ìN DE DEPENDENCIAS CON PIP
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

"""
üì¶ PIP: EL GESTOR DE PAQUETES DE PYTHON

üîß COMANDOS ESENCIALES:

1Ô∏è‚É£ INSTALAR PAQUETE:
   pip install nombre_paquete
   pip install nombre_paquete==1.4.2  # Versi√≥n espec√≠fica
   pip install nombre_paquete>=1.0    # Versi√≥n m√≠nima
   
2Ô∏è‚É£ ACTUALIZAR PAQUETE:
   pip install --upgrade nombre_paquete
   pip install -U nombre_paquete      # Forma corta
   
3Ô∏è‚É£ DESINSTALAR PAQUETE:
   pip uninstall nombre_paquete
   
4Ô∏è‚É£ LISTAR PAQUETES INSTALADOS:
   pip list
   pip list --outdated               # Paquetes desactualizados
   
5Ô∏è‚É£ MOSTRAR INFORMACI√ìN DE PAQUETE:
   pip show nombre_paquete
   
6Ô∏è‚É£ BUSCAR PAQUETES:
   pip search nombre_paquete

‚ö†Ô∏è  MEJORES PR√ÅCTICAS:
‚Ä¢ Siempre instala en entorno virtual activado
‚Ä¢ Usa versiones espec√≠ficas para proyectos cr√≠ticos
‚Ä¢ Mant√©n un registro de dependencias actualizado
‚Ä¢ Actualiza pip regularmente: pip install --upgrade pip
"""

def mostrar_paquetes_instalados():
    """
    üìã Muestra los paquetes instalados en el entorno actual
    """
    try:
        import pkg_resources
        
        print("=" * 60)
        print("üì¶ PAQUETES INSTALADOS EN EL ENTORNO")
        print("=" * 60)
        
        installed_packages = [d for d in pkg_resources.working_set]
        installed_packages.sort(key=lambda x: x.project_name.lower())
        
        for i, package in enumerate(installed_packages, 1):
            print(f"{i:2d}. {package.project_name:20} {package.version}")
            
        print(f"\nüìä Total de paquetes: {len(installed_packages)}")
        
    except ImportError:
        print("‚ùå No se puede importar pkg_resources")

def verificar_dependencias_criticas():
    """
    üîç Verifica la instalaci√≥n de paquetes cr√≠ticos para automatizaci√≥n
    """
    dependencias_criticas = [
        'requests',    # Para comunicaci√≥n HTTP
        'pyserial',    # Para comunicaci√≥n serial
        'pandas',      # Para an√°lisis de datos
        'flask',       # Para desarrollo web
        'sqlalchemy',  # Para bases de datos
        'pymodbus'     # Para comunicaci√≥n Modbus
    ]
    
    print("=" * 60)
    print("üîç VERIFICACI√ìN DE DEPENDENCIAS CR√çTICAS")
    print("=" * 60)
    
    for paquete in dependencias_criticas:
        try:
            __import__(paquete)
            print(f"‚úÖ {paquete:15} - INSTALADO")
        except ImportError:
            print(f"‚ùå {paquete:15} - NO INSTALADO")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üìñ SECCI√ìN 4: REQUIREMENTS.TXT - GESTI√ìN DE DEPENDENCIAS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

"""
üìã REQUIREMENTS.TXT: EL ARCHIVO DE DEPENDENCIAS

üéØ PROP√ìSITO:
Archivo que lista todas las dependencias del proyecto con sus versiones exactas,
permitiendo recrear el mismo entorno en cualquier m√°quina.

üîß COMANDOS PARA REQUIREMENTS.TXT:

1Ô∏è‚É£ GENERAR REQUIREMENTS:
   pip freeze > requirements.txt
   
2Ô∏è‚É£ INSTALAR DESDE REQUIREMENTS:
   pip install -r requirements.txt
   
3Ô∏è‚É£ ACTUALIZAR REQUIREMENTS:
   pip freeze > requirements.txt    # Sobreescribe
   pip list --format=freeze > requirements.txt  # Alternativa

üìù FORMATO DE REQUIREMENTS.TXT:
requests==2.28.1
flask==2.2.2
pandas>=1.5.0
pymodbus~=3.0.0
sqlalchemy>=1.4,<2.0

üîç OPERADORES DE VERSI√ìN:
==  Versi√≥n exacta
>=  Versi√≥n m√≠nima
<=  Versi√≥n m√°xima
~=  Versi√≥n compatible (ej: ~=1.4.0 acepta 1.4.x pero no 1.5.0)
!=  Excluir versi√≥n espec√≠fica

üè≠ EJEMPLO INDUSTRIAL - REQUIREMENTS.TXT:
"""

def generar_requirements_ejemplo():
    """
    üìù Genera un archivo requirements.txt de ejemplo para automatizaci√≥n industrial
    """
    requirements_contenido = """# ======================================================================
# üè≠ DEPENDENCIAS PARA PROYECTO DE AUTOMATIZACI√ìN INDUSTRIAL
# ======================================================================
# Generado el: 2025-01-07
# Python: 3.9+
# Proyecto: Sistema SCADA Industrial

# üåê Comunicaci√≥n y APIs
requests==2.31.0           # HTTP requests para APIs
flask==2.3.3               # Framework web para dashboard
flask-sqlalchemy==3.0.5    # ORM para Flask

# üìä An√°lisis y manipulaci√≥n de datos
pandas==2.0.3              # An√°lisis de datos de sensores
numpy==1.24.3              # C√°lculos num√©ricos
matplotlib==3.7.2          # Gr√°ficos y visualizaci√≥n

# üîå Comunicaci√≥n industrial
pymodbus==3.4.1            # Protocolo Modbus TCP/RTU
pyserial==3.5               # Comunicaci√≥n serial RS485/RS232

# üóÉÔ∏è Base de datos
sqlalchemy==2.0.20         # ORM avanzado
sqlite3                    # Base de datos embebida (built-in)

# ‚è∞ Programaci√≥n de tareas
schedule==1.2.0            # Programador de tareas
python-crontab==2.7.1      # Integraci√≥n con crontab

# üìù Logging y configuraci√≥n
pyyaml==6.0.1              # Archivos de configuraci√≥n YAML
python-dotenv==1.0.0       # Variables de entorno

# üß™ Testing (desarrollo)
pytest==7.4.0              # Framework de testing
pytest-cov==4.1.0          # Coverage de tests

# üìà Monitoreo y alertas
psutil==5.9.5              # Informaci√≥n del sistema
email-validator==2.0.0     # Validaci√≥n de emails para alertas

# üîí Seguridad
cryptography==41.0.3       # Encriptaci√≥n de datos sensibles
"""
    
    return requirements_contenido

def crear_requirements_personalizado():
    """
    üõ†Ô∏è Crea un requirements.txt personalizado para el proyecto actual
    """
    try:
        import subprocess
        
        print("üîÑ Generando requirements.txt...")
        
        # Ejecutar pip freeze
        result = subprocess.run(['pip', 'freeze'], 
                              capture_output=True, 
                              text=True, 
                              check=True)
        
        # Crear contenido del archivo
        contenido = f"""# ======================================================================
# üì¶ DEPENDENCIAS DEL PROYECTO
# ======================================================================
# Generado autom√°ticamente el: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
# Python: {sys.version.split()[0]}

{result.stdout}"""
        
        # Escribir archivo
        with open('requirements.txt', 'w', encoding='utf-8') as f:
            f.write(contenido)
            
        print("‚úÖ requirements.txt generado exitosamente")
        print("üìç Ubicaci√≥n: requirements.txt")
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error ejecutando pip freeze: {e}")
    except Exception as e:
        print(f"‚ùå Error creando requirements.txt: {e}")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üìñ SECCI√ìN 5: ESTRUCTURA PROFESIONAL DE PROYECTOS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

"""
üèóÔ∏è ESTRUCTURA PROFESIONAL DE PROYECTOS PYTHON

üéØ PRINCIPIOS DE ORGANIZACI√ìN:
‚Ä¢ Separaci√≥n clara de responsabilidades
‚Ä¢ Configuraci√≥n centralizada
‚Ä¢ Documentaci√≥n integrada
‚Ä¢ Testing estructurado
‚Ä¢ Deployment simplificado

üìÅ ESTRUCTURA RECOMENDADA PARA AUTOMATIZACI√ìN INDUSTRIAL:

proyecto_automatizacion/
‚îú‚îÄ‚îÄ üìÑ README.md                    # Documentaci√≥n principal
‚îú‚îÄ‚îÄ üìÑ requirements.txt             # Dependencias
‚îú‚îÄ‚îÄ üìÑ .env                        # Variables de entorno
‚îú‚îÄ‚îÄ üìÑ .gitignore                  # Archivos a ignorar en Git
‚îú‚îÄ‚îÄ üìÑ setup.py                    # Configuraci√≥n del paquete
‚îú‚îÄ‚îÄ üìÑ config.yaml                 # Configuraci√≥n de la aplicaci√≥n
‚îÇ
‚îú‚îÄ‚îÄ üìÅ src/                        # C√≥digo fuente principal
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ automatizacion/         # Paquete principal
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ __init__.py         # Inicializador del paquete
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ main.py             # Punto de entrada
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ modbus/             # M√≥dulo Modbus
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ cliente.py      # Cliente Modbus
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ servidor.py     # Servidor Modbus
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ database/           # M√≥dulo base de datos
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ models.py       # Modelos de datos
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ conexion.py     # Gesti√≥n de conexiones
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ web/                # M√≥dulo web (Flask)
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ app.py          # Aplicaci√≥n Flask
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ routes.py       # Rutas web
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ templates/      # Templates HTML
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ utils/              # Utilidades
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ logger.py       # Configuraci√≥n de logs
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ üìÑ config.py       # Carga de configuraci√≥n
‚îÇ
‚îú‚îÄ‚îÄ üìÅ tests/                      # Tests unitarios
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ test_modbus.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ test_database.py
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ test_web.py
‚îÇ
‚îú‚îÄ‚îÄ üìÅ docs/                       # Documentaci√≥n
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ instalacion.md
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ configuracion.md
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ api.md
‚îÇ
‚îú‚îÄ‚îÄ üìÅ scripts/                    # Scripts de utilidad
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ setup_env.py           # Configuraci√≥n inicial
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ backup_db.py           # Backup de base de datos
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ deploy.py              # Script de deployment
‚îÇ
‚îú‚îÄ‚îÄ üìÅ data/                       # Datos del proyecto
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ input/                  # Datos de entrada
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ output/                 # Datos de salida
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ backup/                 # Respaldos
‚îÇ
‚îî‚îÄ‚îÄ üìÅ logs/                       # Archivos de log
    ‚îú‚îÄ‚îÄ üìÑ app.log
    ‚îú‚îÄ‚îÄ üìÑ modbus.log
    ‚îî‚îÄ‚îÄ üìÑ error.log
"""

from pathlib import Path
import os

def crear_estructura_proyecto(nombre_proyecto):
    """
    üèóÔ∏è Crea la estructura completa de un proyecto de automatizaci√≥n industrial
    
    Args:
        nombre_proyecto (str): Nombre del proyecto a crear
    """
    # Definir la estructura de directorios
    estructura = [
        '',  # Directorio ra√≠z
        'src',
        f'src/{nombre_proyecto}',
        f'src/{nombre_proyecto}/modbus',
        f'src/{nombre_proyecto}/database',
        f'src/{nombre_proyecto}/web',
        f'src/{nombre_proyecto}/web/templates',
        f'src/{nombre_proyecto}/web/static',
        f'src/{nombre_proyecto}/web/static/css',
        f'src/{nombre_proyecto}/web/static/js',
        f'src/{nombre_proyecto}/utils',
        'tests',
        'docs',
        'scripts',
        'data',
        'data/input',
        'data/output',
        'data/backup',
        'logs',
        'config'
    ]
    
    # Crear directorios
    base_path = Path(nombre_proyecto)
    
    try:
        print(f"üèóÔ∏è Creando estructura del proyecto: {nombre_proyecto}")
        
        for directorio in estructura:
            dir_path = base_path / directorio if directorio else base_path
            dir_path.mkdir(parents=True, exist_ok=True)
            print(f"üìÅ Creado: {dir_path}")
        
        # Crear archivos __init__.py
        init_files = [
            f'src/{nombre_proyecto}/__init__.py',
            f'src/{nombre_proyecto}/modbus/__init__.py',
            f'src/{nombre_proyecto}/database/__init__.py',
            f'src/{nombre_proyecto}/web/__init__.py',
            f'src/{nombre_proyecto}/utils/__init__.py',
            'tests/__init__.py'
        ]
        
        for init_file in init_files:
            init_path = base_path / init_file
            init_path.touch()
            print(f"üìÑ Creado: {init_path}")
        
        print(f"‚úÖ Estructura del proyecto '{nombre_proyecto}' creada exitosamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error creando estructura: {e}")
        return False

def generar_archivos_configuracion(nombre_proyecto):
    """
    üìù Genera archivos de configuraci√≥n esenciales para el proyecto
    """
    base_path = Path(nombre_proyecto)
    
    # 1. README.md
    readme_content = f"""# {nombre_proyecto.upper()}

üè≠ **Sistema de Automatizaci√≥n Industrial con Python**

## üìã Descripci√≥n

Sistema completo de automatizaci√≥n industrial que integra:
- üîå Comunicaci√≥n Modbus TCP/RTU
- üóÉÔ∏è Base de datos SQL para almacenamiento
- üåê Dashboard web con Flask
- üìä An√°lisis de datos en tiempo real

## üöÄ Instalaci√≥n R√°pida

```bash
# 1. Clonar repositorio
git clone [URL_DEL_REPO]
cd {nombre_proyecto}

# 2. Crear entorno virtual
python -m venv venv

# 3. Activar entorno virtual
# Windows PowerShell:
venv\\Scripts\\Activate.ps1
# Windows CMD:
venv\\Scripts\\activate.bat

# 4. Instalar dependencias
pip install -r requirements.txt

# 5. Ejecutar aplicaci√≥n
python src/{nombre_proyecto}/main.py
```

## üìö Documentaci√≥n

Ver carpeta `docs/` para documentaci√≥n detallada.

## üß™ Testing

```bash
pytest tests/
```

## üìÑ Licencia

MIT License
"""
    
    # 2. .gitignore
    gitignore_content = """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environment
venv/
env/
ENV/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
logs/*.log
*.log

# Database
*.db
*.sqlite3

# Configuration
.env
config/local_config.yaml

# Data
data/input/*
data/output/*
!data/input/.gitkeep
!data/output/.gitkeep

# Backup
data/backup/*
!data/backup/.gitkeep
"""
    
    # 3. .env template
    env_content = """# ======================================================================
# üîß VARIABLES DE ENTORNO - CONFIGURACI√ìN DEL SISTEMA
# ======================================================================
# IMPORTANTE: Renombra este archivo a .env y configura tus valores

# üóÉÔ∏è Base de Datos
DATABASE_URL=sqlite:///data/automatizacion.db
DATABASE_ECHO=False

# üîå Configuraci√≥n Modbus
MODBUS_HOST=192.168.1.100
MODBUS_PORT=502
MODBUS_UNIT_ID=1
MODBUS_TIMEOUT=5

# üåê Configuraci√≥n Web
FLASK_ENV=development
FLASK_DEBUG=True
FLASK_PORT=5000
SECRET_KEY=tu_clave_secreta_muy_segura

# üìù Logging
LOG_LEVEL=INFO
LOG_FILE=logs/app.log

# üìß Notificaciones (opcional)
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
EMAIL_USER=tu_email@gmail.com
EMAIL_PASSWORD=tu_contrase√±a
"""
    
    # 4. config.yaml
    config_content = """# ======================================================================
# ‚öôÔ∏è CONFIGURACI√ìN PRINCIPAL DEL SISTEMA
# ======================================================================

# üè≠ Informaci√≥n del proyecto
proyecto:
  nombre: "{nombre_proyecto}"
  version: "1.0.0"
  descripcion: "Sistema de automatizaci√≥n industrial"
  autor: "Tu Nombre"

# üîå Configuraci√≥n Modbus
modbus:
  tcp:
    host: "192.168.1.100"
    port: 502
    timeout: 5
    unit_id: 1
  
  rtu:
    port: "COM1"
    baudrate: 9600
    bytesize: 8
    parity: "N"
    stopbits: 1
    timeout: 1

# üóÉÔ∏è Base de datos
database:
  url: "sqlite:///data/automatizacion.db"
  echo: false
  pool_size: 5
  max_overflow: 10

# üåê Servidor web
web:
  host: "0.0.0.0"
  port: 5000
  debug: true
  threaded: true

# üìù Logging
logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  handlers:
    - type: "file"
      filename: "logs/app.log"
      max_bytes: 10485760  # 10MB
      backup_count: 5
    - type: "console"

# ‚è∞ Tareas programadas
scheduler:
  interval_lectura: 5  # segundos
  interval_backup: 3600  # 1 hora
  
# üö® Alertas
alertas:
  email_enabled: false
  sms_enabled: false
  telegram_enabled: false
""".format(nombre_proyecto=nombre_proyecto)
    
    # 5. setup.py
    setup_content = f"""from setuptools import setup, find_packages

with open("README.md", "r", encoding="utf-8") as fh:
    long_description = fh.read()

with open("requirements.txt", "r", encoding="utf-8") as fh:
    requirements = [line.strip() for line in fh if line.strip() and not line.startswith("#")]

setup(
    name="{nombre_proyecto}",
    version="1.0.0",
    author="Tu Nombre",
    author_email="tu_email@ejemplo.com",
    description="Sistema de automatizaci√≥n industrial con Python",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url="https://github.com/tu_usuario/{nombre_proyecto}",
    package_dir={{"": "src"}},
    packages=find_packages(where="src"),
    classifiers=[
        "Development Status :: 4 - Beta",
        "Intended Audience :: Manufacturing",
        "Topic :: System :: Hardware",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
    ],
    python_requires=">=3.8",
    install_requires=requirements,
    extras_require={{
        "dev": ["pytest>=7.0", "pytest-cov>=4.0", "black", "flake8"],
        "docs": ["sphinx", "sphinx-rtd-theme"],
    }},
    entry_points={{
        "console_scripts": [
            "{nombre_proyecto}=src.{nombre_proyecto}.main:main",
        ],
    }},
)
"""
    
    # Escribir archivos
    archivos = [
        ("README.md", readme_content),
        (".gitignore", gitignore_content),
        (".env.template", env_content),
        ("config/config.yaml", config_content),
        ("setup.py", setup_content)
    ]
    
    try:
        for archivo, contenido in archivos:
            archivo_path = base_path / archivo
            archivo_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(archivo_path, 'w', encoding='utf-8') as f:
                f.write(contenido)
            
            print(f"üìÑ Creado: {archivo_path}")
        
        # Crear archivos .gitkeep para directorios vac√≠os
        gitkeep_dirs = ['data/input', 'data/output', 'data/backup', 'logs']
        for dir_name in gitkeep_dirs:
            gitkeep_path = base_path / dir_name / '.gitkeep'
            gitkeep_path.touch()
        
        print("‚úÖ Archivos de configuraci√≥n generados exitosamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error generando archivos: {e}")
        return False

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üìñ SECCI√ìN 6: BUENAS PR√ÅCTICAS Y CASOS DE USO INDUSTRIALES
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

"""
üè≠ CASOS DE USO INDUSTRIALES REALES

üéØ CASO 1: M√öLTIPLES VERSIONES DE PYMODBUS
Problema: Proyecto A necesita PyModbus 2.5, Proyecto B necesita PyModbus 3.0
Soluci√≥n: Entorno virtual separado para cada proyecto

üéØ CASO 2: DESARROLLO Y PRODUCCI√ìN
Problema: Diferentes versiones de librer√≠as entre desarrollo y producci√≥n
Soluci√≥n: requirements-dev.txt y requirements-prod.txt separados

üéØ CASO 3: INTEGRACI√ìN CONTINUA
Problema: Tests fallan por dependencias inconsistentes
Soluci√≥n: Entornos virtuales en pipeline CI/CD

‚ö†Ô∏è  ADVERTENCIAS CR√çTICAS:

‚ùå NUNCA hagas: pip install en el sistema global para proyectos
‚úÖ SIEMPRE usa: entorno virtual activado

‚ùå NUNCA hagas: requirements.txt sin versiones espec√≠ficas
‚úÖ SIEMPRE usa: versiones exactas para producci√≥n

‚ùå NUNCA hagas: compartir entornos virtuales entre proyectos
‚úÖ SIEMPRE usa: un entorno virtual por proyecto

üîí MEJORES PR√ÅCTICAS INDUSTRIALES:

1Ô∏è‚É£ NOMENCLATURA CONSISTENTE:
   proyecto_venv, automatizacion_env, scada_python39

2Ô∏è‚É£ DOCUMENTACI√ìN:
   Siempre documenta las versiones de Python y librer√≠as utilizadas

3Ô∏è‚É£ BACKUP DE ENTORNOS:
   Mant√©n requirements.txt actualizado como backup

4Ô∏è‚É£ TESTING:
   Prueba la instalaci√≥n desde requirements.txt regularmente

5Ô∏è‚É£ VERSIONADO:
   Usa Git para versionar requirements.txt y configuraci√≥n
"""

def validar_configuracion_proyecto(ruta_proyecto):
    """
    üîç Valida que la configuraci√≥n del proyecto sea correcta
    
    Args:
        ruta_proyecto (str): Ruta al directorio del proyecto
    """
    proyecto_path = Path(ruta_proyecto)
    
    print("=" * 60)
    print("üîç VALIDACI√ìN DE CONFIGURACI√ìN DEL PROYECTO")
    print("=" * 60)
    
    # Verificar archivos cr√≠ticos
    archivos_criticos = [
        'requirements.txt',
        'README.md',
        '.gitignore',
        'src',
        'tests'
    ]
    
    print("üìã Verificando archivos cr√≠ticos:")
    for archivo in archivos_criticos:
        archivo_path = proyecto_path / archivo
        if archivo_path.exists():
            print(f"‚úÖ {archivo}")
        else:
            print(f"‚ùå {archivo} - FALTANTE")
    
    # Verificar entorno virtual
    print("\nüêç Verificando entorno virtual:")
    if verificar_entorno_virtual():
        print("‚úÖ Entorno virtual activo")
    else:
        print("‚ö†Ô∏è  No se detect√≥ entorno virtual activo")
    
    # Verificar requirements.txt
    requirements_path = proyecto_path / 'requirements.txt'
    if requirements_path.exists():
        print("\nüì¶ Analizando requirements.txt:")
        try:
            with open(requirements_path, 'r') as f:
                lineas = f.readlines()
            
            paquetes = [line.strip() for line in lineas 
                       if line.strip() and not line.startswith('#')]
            
            print(f"üìä Total de dependencias: {len(paquetes)}")
            
            # Verificar si hay versiones especificadas
            con_version = sum(1 for p in paquetes if any(op in p for op in ['==', '>=', '<=', '~=']))
            print(f"üìå Con versi√≥n especificada: {con_version}/{len(paquetes)}")
            
            if con_version < len(paquetes):
                print("‚ö†Ô∏è  Recomendaci√≥n: Especifica versiones para todas las dependencias")
            
        except Exception as e:
            print(f"‚ùå Error leyendo requirements.txt: {e}")
    
    print("\n" + "=" * 60)

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üéØ PROYECTO INTEGRADOR: SETUP COMPLETO DE PROYECTO DE AUTOMATIZACI√ìN
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def proyecto_setup_automatizacion():
    """
    üè≠ PROYECTO PRINCIPAL: Setup completo de proyecto de automatizaci√≥n industrial
    
    Este proyecto integra todos los conceptos del m√≥dulo:
    ‚Ä¢ Creaci√≥n de entorno virtual
    ‚Ä¢ Gesti√≥n de dependencias
    ‚Ä¢ Estructura profesional de proyecto
    ‚Ä¢ Configuraci√≥n y documentaci√≥n
    """
    import datetime
    
    print("=" * 80)
    print("üè≠ PROYECTO: SETUP COMPLETO DE AUTOMATIZACI√ìN INDUSTRIAL")
    print("=" * 80)
    
    # Configuraci√≥n del proyecto
    nombre_proyecto = "sistema_scada_industrial"
    python_version = f"{sys.version_info.major}.{sys.version_info.minor}"
    
    print(f"üìã Configuraci√≥n del proyecto:")
    print(f"   üì¶ Nombre: {nombre_proyecto}")
    print(f"   üêç Python: {python_version}")
    print(f"   üìÖ Fecha: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Paso 1: Verificar entorno actual
    print(f"\n1Ô∏è‚É£ Verificando entorno actual...")
    mostrar_info_python()
    
    # Paso 2: Crear estructura del proyecto
    print(f"\n2Ô∏è‚É£ Creando estructura del proyecto...")
    if crear_estructura_proyecto(nombre_proyecto):
        print("‚úÖ Estructura creada exitosamente")
    else:
        print("‚ùå Error creando estructura")
        return
    
    # Paso 3: Generar archivos de configuraci√≥n
    print(f"\n3Ô∏è‚É£ Generando archivos de configuraci√≥n...")
    if generar_archivos_configuracion(nombre_proyecto):
        print("‚úÖ Configuraci√≥n generada exitosamente")
    else:
        print("‚ùå Error generando configuraci√≥n")
        return
    
    # Paso 4: Crear requirements.txt personalizado
    print(f"\n4Ô∏è‚É£ Generando requirements.txt...")
    requirements_industriales = generar_requirements_ejemplo()
    
    try:
        requirements_path = Path(nombre_proyecto) / "requirements.txt"
        with open(requirements_path, 'w', encoding='utf-8') as f:
            f.write(requirements_industriales)
        print("‚úÖ requirements.txt generado")
    except Exception as e:
        print(f"‚ùå Error generando requirements.txt: {e}")
    
    # Paso 5: Validar configuraci√≥n
    print(f"\n5Ô∏è‚É£ Validando configuraci√≥n final...")
    validar_configuracion_proyecto(nombre_proyecto)
    
    # Paso 6: Instrucciones finales
    print(f"\nüéØ INSTRUCCIONES PARA CONTINUAR:")
    print(f"   1. cd {nombre_proyecto}")
    print(f"   2. python -m venv venv")
    print(f"   3. venv\\Scripts\\Activate.ps1  # (Windows PowerShell)")
    print(f"   4. pip install -r requirements.txt")
    print(f"   5. python src/{nombre_proyecto}/main.py")
    
    print(f"\n‚úÖ ¬°Proyecto {nombre_proyecto} configurado exitosamente!")
    print("üöÄ ¬°Listo para comenzar el desarrollo industrial!")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üéì PREGUNTAS DE REFLEXI√ìN Y AUTOEVALUACI√ìN
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

"""
ü§î PREGUNTAS DE REFLEXI√ìN:

1Ô∏è‚É£ ¬øPor qu√© es cr√≠tico usar entornos virtuales en proyectos industriales?
2Ô∏è‚É£ ¬øQu√© problemas puede causar no especificar versiones en requirements.txt?
3Ô∏è‚É£ ¬øC√≥mo estructurar√≠as un proyecto que debe funcionar en m√∫ltiples plantas?
4Ô∏è‚É£ ¬øQu√© consideraciones especiales tiene el deployment en entornos industriales?
5Ô∏è‚É£ ¬øC√≥mo garantizas la reproducibilidad del entorno en diferentes m√°quinas?

üí° EJERCICIOS PR√ÅCTICOS:

üîß B√ÅSICO:
   Crear entorno virtual y instalar 3 paquetes espec√≠ficos

üîß INTERMEDIO:
   Migrar proyecto existente a estructura profesional

üîß AVANZADO:
   Configurar m√∫ltiples entornos (dev, test, prod) para mismo proyecto

üîß PROYECTO:
   Setup completo de sistema SCADA con todas las dependencias
"""

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üöÄ EJECUCI√ìN PRINCIPAL
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

if __name__ == "__main__":
    print("üéØ M√ìDULO 2.3: ENTORNO VIRTUAL Y GESTI√ìN DE DEPENDENCIAS")
    print("=" * 60)
    
    # Ejecutar proyecto principal
    try:
        proyecto_setup_automatizacion()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Proceso interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error en la ejecuci√≥n: {e}")
    
    print("\nüéì ¬°M√≥dulo completado! Contin√∫a con las pr√°cticas.")

"""
üìö RESUMEN DEL M√ìDULO:

‚úÖ Conceptos fundamentales de entornos virtuales
‚úÖ Uso avanzado de venv y pip
‚úÖ Gesti√≥n profesional de dependencias con requirements.txt
‚úÖ Estructura profesional de proyectos Python
‚úÖ Mejores pr√°cticas industriales
‚úÖ Proyecto integrador completo

üéØ PR√ìXIMO M√ìDULO: FASE 3 - BASES DE DATOS CON SQL

üí™ ¬°Sigue adelante hacia la maestr√≠a en Python industrial!
"""
