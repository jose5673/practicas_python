"""
üêçüóÑÔ∏è M√ìDULO 3.2: PYTHON + SQLITE - INTEGRACI√ìN COMPLETA
üìä Maestr√≠a en Python - Fase 3: Gesti√≥n de Datos con Python

=================================================================
OBJETIVO PRINCIPAL: Integrar conocimientos SQL con Python
=================================================================

Este m√≥dulo conecta los fundamentos SQL aprendidos en 3.1 con las
capacidades de Python para crear soluciones de automatizaci√≥n
industrial completas y profesionales.

üìã TEMARIO DETALLADO:
==================

1. CONEXI√ìN PYTHON-SQLITE
   - M√≥dulo sqlite3 nativo
   - Gesti√≥n de conexiones
   - Context managers
   - Manejo de errores

2. OPERACIONES CRUD CON PYTHON
   - Create: Inserci√≥n de datos
   - Read: Consultas y fetchs
   - Update: Actualizaci√≥n de registros
   - Delete: Eliminaci√≥n segura

3. PANDAS + SQL
   - read_sql_query()
   - DataFrame to SQL
   - An√°lisis de datos h√≠brido
   - Visualizaci√≥n de resultados

4. AUTOMATIZACI√ìN DE REPORTES
   - Generaci√≥n autom√°tica
   - Exportaci√≥n a m√∫ltiples formatos
   - Scheduling con Python
   - Notificaciones autom√°ticas

5. PATRONES DE DISE√ëO PARA BD
   - DAO (Data Access Object)
   - Repository Pattern
   - Connection Pooling
   - Transacciones complejas

=================================================================
CONCEPTOS FUNDAMENTALES
=================================================================

1. M√ìDULO SQLITE3 NATIVO
========================

Python incluye sqlite3 de forma nativa, proporcionando una interfaz
completa para trabajar con bases de datos SQLite.

"""

import sqlite3
import pandas as pd
from datetime import datetime, date
import json
import csv
from pathlib import Path
from contextlib import contextmanager
from typing import List, Dict, Any, Optional

# Ejemplo b√°sico de conexi√≥n
def conexion_basica():
    """Ejemplo de conexi√≥n b√°sica a SQLite"""
    
    # Conectar a base de datos (se crea si no existe)
    conn = sqlite3.connect('empresa_industrial.db')
    cursor = conn.cursor()
    
    # Configurar para que devuelva diccionarios
    conn.row_factory = sqlite3.Row
    
    # Operaci√≥n simple
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    tablas = cursor.fetchall()
    
    # Cerrar conexi√≥n
    conn.close()
    
    return tablas

"""
2. CONTEXT MANAGERS PARA BASES DE DATOS
=======================================

Los context managers garantizan que las conexiones se cierren
correctamente, incluso si ocurre un error.
"""

@contextmanager
def obtener_conexion(db_path: str):
    """Context manager para manejo seguro de conexiones"""
    conn = None
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row  # Resultados como diccionarios
        yield conn
    except sqlite3.Error as e:
        if conn:
            conn.rollback()
        raise
    finally:
        if conn:
            conn.close()

# Uso del context manager
def ejemplo_context_manager():
    """Ejemplo de uso de context manager"""
    
    with obtener_conexion('empresa.db') as conn:
        cursor = conn.cursor()
        
        # Todas las operaciones aqu√≠
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS sensores (
                id INTEGER PRIMARY KEY,
                nombre TEXT NOT NULL,
                tipo TEXT NOT NULL,
                valor REAL,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # La conexi√≥n se cierra autom√°ticamente

"""
3. CLASE DAO (DATA ACCESS OBJECT)
================================

Encapsula todas las operaciones de base de datos en una clase
organizada y reutilizable.
"""

class EmpleadoDAO:
    """Data Access Object para empleados"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._inicializar_tabla()
    
    def _inicializar_tabla(self):
        """Crea la tabla si no existe"""
        with obtener_conexion(self.db_path) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS empleados (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nombre TEXT NOT NULL,
                    apellido TEXT NOT NULL,
                    email TEXT UNIQUE,
                    salario REAL,
                    departamento TEXT,
                    fecha_ingreso DATE,
                    activo BOOLEAN DEFAULT 1
                )
            """)
            conn.commit()
    
    def crear_empleado(self, empleado: Dict[str, Any]) -> int:
        """Crea un nuevo empleado"""
        with obtener_conexion(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO empleados (nombre, apellido, email, salario, departamento, fecha_ingreso)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                empleado['nombre'],
                empleado['apellido'],
                empleado['email'],
                empleado['salario'],
                empleado['departamento'],
                empleado['fecha_ingreso']
            ))
            conn.commit()
            return cursor.lastrowid
    
    def obtener_empleado(self, id_empleado: int) -> Optional[Dict]:
        """Obtiene un empleado por ID"""
        with obtener_conexion(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM empleados WHERE id = ?", (id_empleado,))
            row = cursor.fetchone()
            return dict(row) if row else None
    
    def obtener_todos_empleados(self) -> List[Dict]:
        """Obtiene todos los empleados"""
        with obtener_conexion(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM empleados WHERE activo = 1")
            return [dict(row) for row in cursor.fetchall()]
    
    def actualizar_empleado(self, id_empleado: int, datos: Dict[str, Any]) -> bool:
        """Actualiza un empleado"""
        with obtener_conexion(self.db_path) as conn:
            # Construir query din√°mico
            campos = []
            valores = []
            for campo, valor in datos.items():
                campos.append(f"{campo} = ?")
                valores.append(valor)
            
            valores.append(id_empleado)
            query = f"UPDATE empleados SET {', '.join(campos)} WHERE id = ?"
            
            cursor = conn.cursor()
            cursor.execute(query, valores)
            conn.commit()
            return cursor.rowcount > 0
    
    def eliminar_empleado(self, id_empleado: int) -> bool:
        """Elimina (marca como inactivo) un empleado"""
        with obtener_conexion(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE empleados SET activo = 0 WHERE id = ?", (id_empleado,))
            conn.commit()
            return cursor.rowcount > 0
    
    def buscar_empleados(self, filtros: Dict[str, Any]) -> List[Dict]:
        """B√∫squeda avanzada de empleados"""
        with obtener_conexion(self.db_path) as conn:
            where_clauses = []
            valores = []
            
            for campo, valor in filtros.items():
                if isinstance(valor, str) and '%' in valor:
                    where_clauses.append(f"{campo} LIKE ?")
                else:
                    where_clauses.append(f"{campo} = ?")
                valores.append(valor)
            
            where_sql = " AND ".join(where_clauses) if where_clauses else "1=1"
            query = f"SELECT * FROM empleados WHERE {where_sql} AND activo = 1"
            
            cursor = conn.cursor()
            cursor.execute(query, valores)
            return [dict(row) for row in cursor.fetchall()]

"""
4. INTEGRACI√ìN CON PANDAS
========================

Pandas ofrece funciones espec√≠ficas para trabajar con SQL,
permitiendo an√°lisis de datos m√°s potentes.
"""

class AnalisisEmpleados:
    """An√°lisis de datos de empleados usando Pandas + SQL"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
    
    def obtener_conexion(self):
        """Obtiene conexi√≥n para pandas"""
        return sqlite3.connect(self.db_path)
    
    def estadisticas_departamento(self) -> pd.DataFrame:
        """Estad√≠sticas por departamento"""
        query = """
            SELECT 
                departamento,
                COUNT(*) as total_empleados,
                ROUND(AVG(salario), 2) as salario_promedio,
                MIN(salario) as salario_minimo,
                MAX(salario) as salario_maximo,
                SUM(salario) as costo_total
            FROM empleados 
            WHERE activo = 1
            GROUP BY departamento
            ORDER BY salario_promedio DESC
        """
        
        with self.obtener_conexion() as conn:
            return pd.read_sql_query(query, conn)
    
    def tendencias_contratacion(self) -> pd.DataFrame:
        """An√°lisis de tendencias de contrataci√≥n"""
        query = """
            SELECT 
                strftime('%Y', fecha_ingreso) as a√±o,
                strftime('%m', fecha_ingreso) as mes,
                COUNT(*) as contrataciones,
                AVG(salario) as salario_promedio_ingreso
            FROM empleados
            WHERE activo = 1
            GROUP BY a√±o, mes
            ORDER BY a√±o DESC, mes DESC
        """
        
        with self.obtener_conexion() as conn:
            df = pd.read_sql_query(query, conn)
            df['fecha'] = pd.to_datetime(df[['a√±o', 'mes']].assign(day=1))
            return df
    
    def exportar_reporte_excel(self, archivo: str):
        """Exporta m√∫ltiples an√°lisis a Excel"""
        with pd.ExcelWriter(archivo, engine='openpyxl') as writer:
            # Hoja 1: Estad√≠sticas generales
            stats = self.estadisticas_departamento()
            stats.to_excel(writer, sheet_name='Estad√≠sticas Departamento', index=False)
            
            # Hoja 2: Tendencias
            tendencias = self.tendencias_contratacion()
            tendencias.to_excel(writer, sheet_name='Tendencias Contrataci√≥n', index=False)
            
            # Hoja 3: Datos raw
            with self.obtener_conexion() as conn:
                empleados = pd.read_sql_query(
                    "SELECT * FROM empleados WHERE activo = 1", conn
                )
                empleados.to_excel(writer, sheet_name='Datos Empleados', index=False)

"""
5. SISTEMA DE MONITOREO INDUSTRIAL
==================================

Ejemplo pr√°ctico de un sistema completo de monitoreo industrial
que integra sensores, alarmas y reportes automatizados.
"""

class SistemaMonitoreoIndustrial:
    """Sistema completo de monitoreo para planta industrial"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._inicializar_sistema()
    
    def _inicializar_sistema(self):
        """Inicializa todas las tablas del sistema"""
        with obtener_conexion(self.db_path) as conn:
            conn.executescript("""
                -- Tabla de sensores
                CREATE TABLE IF NOT EXISTS sensores (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nombre TEXT NOT NULL,
                    tipo TEXT NOT NULL,
                    ubicacion TEXT,
                    unidad_medida TEXT,
                    valor_min REAL,
                    valor_max REAL,
                    activo BOOLEAN DEFAULT 1
                );
                
                -- Tabla de lecturas
                CREATE TABLE IF NOT EXISTS lecturas (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    sensor_id INTEGER,
                    valor REAL NOT NULL,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    estado TEXT DEFAULT 'NORMAL',
                    FOREIGN KEY (sensor_id) REFERENCES sensores(id)
                );
                
                -- Tabla de alarmas
                CREATE TABLE IF NOT EXISTS alarmas (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    sensor_id INTEGER,
                    tipo_alarma TEXT,
                    mensaje TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    resuelto BOOLEAN DEFAULT 0,
                    FOREIGN KEY (sensor_id) REFERENCES sensores(id)
                );
                
                -- √çndices para rendimiento
                CREATE INDEX IF NOT EXISTS idx_lecturas_sensor_time 
                ON lecturas(sensor_id, timestamp);
                
                CREATE INDEX IF NOT EXISTS idx_alarmas_resuelto 
                ON alarmas(resuelto, timestamp);
            """)
            conn.commit()
    
    def registrar_sensor(self, sensor_data: Dict[str, Any]) -> int:
        """Registra un nuevo sensor"""
        with obtener_conexion(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO sensores (nombre, tipo, ubicacion, unidad_medida, valor_min, valor_max)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                sensor_data['nombre'],
                sensor_data['tipo'],
                sensor_data['ubicacion'],
                sensor_data['unidad_medida'],
                sensor_data['valor_min'],
                sensor_data['valor_max']
            ))
            conn.commit()
            return cursor.lastrowid
    
    def registrar_lectura(self, sensor_id: int, valor: float) -> bool:
        """Registra una lectura y verifica alarmas"""
        with obtener_conexion(self.db_path) as conn:
            cursor = conn.cursor()
            
            # Obtener l√≠mites del sensor
            cursor.execute(
                "SELECT valor_min, valor_max, nombre FROM sensores WHERE id = ?",
                (sensor_id,)
            )
            sensor = cursor.fetchone()
            
            if not sensor:
                return False
            
            valor_min, valor_max, nombre = sensor
            
            # Determinar estado
            if valor < valor_min:
                estado = 'BAJO'
                self._crear_alarma(conn, sensor_id, 'VALOR_BAJO', 
                                 f"{nombre}: Valor {valor} por debajo del m√≠nimo {valor_min}")
            elif valor > valor_max:
                estado = 'ALTO'
                self._crear_alarma(conn, sensor_id, 'VALOR_ALTO', 
                                 f"{nombre}: Valor {valor} por encima del m√°ximo {valor_max}")
            else:
                estado = 'NORMAL'
            
            # Registrar lectura
            cursor.execute("""
                INSERT INTO lecturas (sensor_id, valor, estado)
                VALUES (?, ?, ?)
            """, (sensor_id, valor, estado))
            
            conn.commit()
            return True
    
    def _crear_alarma(self, conn, sensor_id: int, tipo: str, mensaje: str):
        """Crea una nueva alarma"""
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO alarmas (sensor_id, tipo_alarma, mensaje)
            VALUES (?, ?, ?)
        """, (sensor_id, tipo, mensaje))
    
    def obtener_dashboard_data(self) -> Dict[str, Any]:
        """Obtiene datos para dashboard en tiempo real"""
        with obtener_conexion(self.db_path) as conn:
            # √öltimas lecturas por sensor
            ultimas_lecturas = pd.read_sql_query("""
                SELECT 
                    s.nombre,
                    s.tipo,
                    s.ubicacion,
                    l.valor,
                    l.estado,
                    l.timestamp
                FROM sensores s
                INNER JOIN lecturas l ON s.id = l.sensor_id
                WHERE l.timestamp = (
                    SELECT MAX(timestamp) 
                    FROM lecturas l2 
                    WHERE l2.sensor_id = s.id
                )
                AND s.activo = 1
            """, conn)
            
            # Alarmas activas
            alarmas_activas = pd.read_sql_query("""
                SELECT 
                    s.nombre as sensor,
                    a.tipo_alarma,
                    a.mensaje,
                    a.timestamp
                FROM alarmas a
                INNER JOIN sensores s ON a.sensor_id = s.id
                WHERE a.resuelto = 0
                ORDER BY a.timestamp DESC
            """, conn)
            
            # Estad√≠sticas del d√≠a
            stats_dia = pd.read_sql_query("""
                SELECT 
                    COUNT(*) as total_lecturas,
                    COUNT(DISTINCT sensor_id) as sensores_activos,
                    SUM(CASE WHEN estado != 'NORMAL' THEN 1 ELSE 0 END) as lecturas_anomalas
                FROM lecturas 
                WHERE DATE(timestamp) = DATE('now')
            """, conn)
            
            return {
                'ultimas_lecturas': ultimas_lecturas.to_dict('records'),
                'alarmas_activas': alarmas_activas.to_dict('records'),
                'estadisticas_dia': stats_dia.iloc[0].to_dict(),
                'timestamp_actualizacion': datetime.now().isoformat()
            }
    
    def generar_reporte_diario(self, fecha: str = None) -> Dict[str, Any]:
        """Genera reporte diario completo"""
        if not fecha:
            fecha = datetime.now().strftime('%Y-%m-%d')
        
        with obtener_conexion(self.db_path) as conn:
            # Resumen del d√≠a
            resumen = pd.read_sql_query("""
                SELECT 
                    s.nombre,
                    s.tipo,
                    COUNT(l.id) as total_lecturas,
                    ROUND(AVG(l.valor), 2) as valor_promedio,
                    MIN(l.valor) as valor_minimo,
                    MAX(l.valor) as valor_maximo,
                    SUM(CASE WHEN l.estado != 'NORMAL' THEN 1 ELSE 0 END) as lecturas_anomalas
                FROM sensores s
                LEFT JOIN lecturas l ON s.id = l.sensor_id AND DATE(l.timestamp) = ?
                WHERE s.activo = 1
                GROUP BY s.id, s.nombre, s.tipo
                ORDER BY s.nombre
            """, conn, params=[fecha])
            
            # Alarmas del d√≠a
            alarmas = pd.read_sql_query("""
                SELECT 
                    s.nombre as sensor,
                    a.tipo_alarma,
                    a.mensaje,
                    a.timestamp,
                    a.resuelto
                FROM alarmas a
                INNER JOIN sensores s ON a.sensor_id = s.id
                WHERE DATE(a.timestamp) = ?
                ORDER BY a.timestamp
            """, conn, params=[fecha])
            
            return {
                'fecha': fecha,
                'resumen_sensores': resumen.to_dict('records'),
                'alarmas_dia': alarmas.to_dict('records'),
                'total_sensores': len(resumen),
                'total_alarmas': len(alarmas),
                'alarmas_resueltas': len(alarmas[alarmas['resuelto'] == 1]),
                'generado_en': datetime.now().isoformat()
            }

"""
6. INTEGRACI√ìN CON PANDAS PARA AN√ÅLISIS H√çBRIDO
=================================================================

"""
La integraci√≥n de SQLite con Pandas es fundamental para an√°lisis
de datos industriales. Pandas puede leer directamente desde SQLite
y tambi√©n escribir DataFrames a la base de datos.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import numpy as np

def demo_pandas_sqlite():
    """Demostraci√≥n completa de integraci√≥n Pandas + SQLite"""
    
    # 1. LECTURA DIRECTA CON PANDAS
    with get_db_connection() as conn:
        # Leer datos de sensores con JOIN
        query_sensores = """
        SELECT 
            s.nombre as sensor,
            s.tipo,
            s.ubicacion,
            l.valor,
            l.timestamp,
            l.calidad
        FROM sensores s
        JOIN lecturas l ON s.id = l.sensor_id
        ORDER BY l.timestamp DESC
        """
        
        df_lecturas = pd.read_sql_query(query_sensores, conn)
        
        print(f"üìà DataFrame cargado: {len(df_lecturas)} registros")
        print("\nüîç Primeras 5 filas:")
        print(df_lecturas.head())
        
        # 2. AN√ÅLISIS ESTAD√çSTICO
        print("\nüìä Estad√≠sticas por tipo de sensor:")
        stats_por_tipo = df_lecturas.groupby('tipo')['valor'].agg([
            'count', 'mean', 'std', 'min', 'max'
        ]).round(2)
        print(stats_por_tipo)
        
        # 3. DETECCI√ìN DE VALORES AT√çPICOS
        print("\nüö® Detecci√≥n de valores at√≠picos:")
        for tipo in df_lecturas['tipo'].unique():
            datos_tipo = df_lecturas[df_lecturas['tipo'] == tipo]['valor']
            Q1 = datos_tipo.quantile(0.25)
            Q3 = datos_tipo.quantile(0.75)
            IQR = Q3 - Q1
            
            outliers = datos_tipo[
                (datos_tipo < Q1 - 1.5 * IQR) | 
                (datos_tipo > Q3 + 1.5 * IQR)
            ]
            
            print(f"    {tipo}: {len(outliers)} valores at√≠picos")
        
        return df_lecturas

"""
7. GENERACI√ìN AUTOM√ÅTICA DE REPORTES
=================================================================

"""
Los reportes autom√°ticos son cruciales en sistemas industriales.
Python permite generar reportes complejos combinando datos SQL
con an√°lisis estad√≠stico y exportaci√≥n a m√∫ltiples formatos.
"""

def generar_reporte_operacional():
    """Genera un reporte operacional completo del sistema industrial"""
    
    with get_db_connection() as conn:
        # Datos para el reporte
        reporte_data = {}
        
        # 1. Estado general del sistema
        query_resumen = """
        SELECT 
            COUNT(DISTINCT s.id) as total_sensores,
            COUNT(DISTINCT s.id) FILTER (WHERE s.activo = 1) as sensores_activos,
            COUNT(l.id) as total_lecturas,
            COUNT(DISTINCT a.id) as total_alarmas,
            COUNT(DISTINCT a.id) FILTER (WHERE a.reconocida = 0) as alarmas_pendientes
        FROM sensores s
        LEFT JOIN lecturas l ON s.id = l.sensor_id AND l.timestamp >= datetime('now', '-24 hours')
        LEFT JOIN alarmas a ON s.id = a.sensor_id AND a.timestamp >= datetime('now', '-24 hours')
        """
        
        resumen = pd.read_sql_query(query_resumen, conn).iloc[0]
        reporte_data['resumen'] = resumen
        
        # 2. Top sensores con m√°s lecturas
        query_top_sensores = """
        SELECT 
            s.nombre,
            s.tipo,
            s.ubicacion,
            COUNT(l.id) as num_lecturas,
            AVG(l.valor) as valor_promedio,
            MAX(l.timestamp) as ultima_lectura
        FROM sensores s
        JOIN lecturas l ON s.id = l.sensor_id
        WHERE l.timestamp >= datetime('now', '-24 hours')
        GROUP BY s.id, s.nombre, s.tipo, s.ubicacion
        ORDER BY num_lecturas DESC
        LIMIT 5
        """
        
        top_sensores = pd.read_sql_query(query_top_sensores, conn)
        reporte_data['top_sensores'] = top_sensores
        
        return reporte_data

def exportar_reporte_excel(reporte_data, nombre_archivo="reporte_operacional.xlsx"):
    """Exporta el reporte a un archivo Excel con m√∫ltiples hojas"""
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    nombre_archivo = f"reporte_operacional_{timestamp}.xlsx"
    
    with pd.ExcelWriter(nombre_archivo, engine='openpyxl') as writer:
        # Hoja 1: Resumen ejecutivo
        df_resumen = pd.DataFrame([reporte_data['resumen']])
        df_resumen.to_excel(writer, sheet_name='Resumen_Ejecutivo', index=False)
        
        # Hoja 2: Top sensores
        reporte_data['top_sensores'].to_excel(writer, sheet_name='Top_Sensores', index=False)
    
    print(f"üìÑ Reporte exportado: {nombre_archivo}")
    return nombre_archivo

"""
8. EJERCICIOS PR√ÅCTICOS PROGRESIVOS
=================================================================

"""
Ejercicios dise√±ados para consolidar el aprendizaje de manera
progresiva, desde conceptos b√°sicos hasta implementaciones
avanzadas de sistemas industriales completos.
"""

# NIVEL B√ÅSICO üü¢
def ejercicio_basico_conexion():
    """Ejercicio b√°sico: Conexi√≥n y consultas simples"""
    
    print("üéØ EJERCICIO B√ÅSICO: Conexi√≥n y Consultas")
    
    with get_db_connection() as conn:
        cursor = conn.cursor()
        
        # Contar sensores
        cursor.execute("SELECT COUNT(*) FROM sensores")
        total_sensores = cursor.fetchone()[0]
        print(f"üìä Total de sensores: {total_sensores}")
        
        # Listar sensores activos
        cursor.execute("SELECT nombre, tipo, ubicacion FROM sensores WHERE activo = 1")
        sensores_activos = cursor.fetchall()
        print(f"‚úÖ Sensores activos: {len(sensores_activos)}")

# NIVEL INTERMEDIO üü°
def ejercicio_intermedio_pandas():
    """Ejercicio intermedio: An√°lisis con Pandas"""
    
    print("üéØ EJERCICIO INTERMEDIO: An√°lisis con Pandas")
    
    with get_db_connection() as conn:
        df = pd.read_sql_query("""
            SELECT s.nombre, s.tipo, l.valor, l.timestamp
            FROM sensores s
            JOIN lecturas l ON s.id = l.sensor_id
            WHERE l.timestamp >= datetime('now', '-24 hours')
        """, conn)
        
        print(f"üìä Datos cargados: {len(df)} registros")
        
        # An√°lisis estad√≠stico
        stats = df.groupby('tipo')['valor'].agg(['count', 'mean', 'std']).round(2)
        print("üìà Estad√≠sticas por tipo:")
        print(stats)

# NIVEL AVANZADO üî¥
def ejercicio_avanzado_dashboard():
    """Ejercicio avanzado: Dashboard industrial completo"""
    
    print("üéØ EJERCICIO AVANZADO: Dashboard Industrial")
    
    class DashboardIndustrial:
        """Sistema completo de dashboard industrial"""
        
        def __init__(self):
            self.nombre_sistema = "SCADA Industrial v3.2"
            self.fecha_inicio = datetime.now()
        
        def estado_general(self):
            """Muestra el estado general del sistema"""
            print(f"\nüè≠ {self.nombre_sistema}")
            print(f"üìÖ Sesi√≥n iniciada: {self.fecha_inicio.strftime('%Y-%m-%d %H:%M:%S')}")
            
            with get_db_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute("SELECT COUNT(*) FROM sensores WHERE activo = 1")
                sensores_activos = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM lecturas WHERE timestamp >= datetime('now', '-1 hour')")
                lecturas_hora = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM alarmas WHERE reconocida = 0")
                alarmas_pendientes = cursor.fetchone()[0]
                
                print(f"üü¢ Sensores activos: {sensores_activos}")
                print(f"üìà Lecturas (1h): {lecturas_hora}")
                print(f"üö® Alarmas pendientes: {alarmas_pendientes}")
        
        def generar_reporte_ejecutivo(self):
            """Genera reporte ejecutivo completo"""
            print("\nüìã REPORTE EJECUTIVO:")
            
            datos_reporte = generar_reporte_operacional()
            
            print(f"üìä Sistema: {self.nombre_sistema}")
            print(f"‚úÖ Estado: OPERACIONAL")
            print(f"üïê Generado: {datetime.now().isoformat()}")
            
            return datos_reporte
    
    # Ejecutar dashboard
    dashboard = DashboardIndustrial()
    dashboard.estado_general()
    reporte = dashboard.generar_reporte_ejecutivo()
    
    return dashboard, reporte

"""
9. EVALUACI√ìN Y CONSOLIDACI√ìN
=================================================================

def cuestionario_evaluacion():
    """Cuestionario de evaluaci√≥n del m√≥dulo"""
    
    print("üìù CUESTIONARIO DE EVALUACI√ìN - M√ìDULO 3.2")
    print("=" * 50)
    
    preguntas = {
        1: {
            'pregunta': '¬øCu√°l es la ventaja de usar context managers con SQLite?',
            'opciones': [
                'a) Mayor velocidad de consultas',
                'b) Gesti√≥n autom√°tica de conexiones y transacciones',
                'c) Mejor compatibilidad con Pandas',
                'd) Reduce el tama√±o de la base de datos'
            ],
            'respuesta_correcta': 'b',
            'explicacion': 'Los context managers garantizan que las conexiones se cierren autom√°ticamente y las transacciones se manejen correctamente.'
        },
        2: {
            'pregunta': '¬øQu√© patr√≥n de dise√±o implementamos para la gesti√≥n de sensores?',
            'opciones': [
                'a) Singleton',
                'b) Factory', 
                'c) DAO (Data Access Object)',
                'd) Observer'
            ],
            'respuesta_correcta': 'c',
            'explicacion': 'El patr√≥n DAO encapsula la l√≥gica de acceso a datos, separando la l√≥gica de negocio de la persistencia.'
        },
        3: {
            'pregunta': '¬øCu√°l es la principal ventaja de usar pd.read_sql_query()?',
            'opciones': [
                'a) Es m√°s r√°pido que SQLite puro',
                'b) Convierte autom√°ticamente los datos a DataFrame para an√°lisis',
                'c) Usa menos memoria',
                'd) Es m√°s seguro contra inyecci√≥n SQL'
            ],
            'respuesta_correcta': 'b',
            'explicacion': 'pd.read_sql_query() convierte autom√°ticamente los resultados SQL en DataFrames de Pandas, facilitando el an√°lisis posterior.'
        }
    }
    
    print("‚úÖ RESPUESTAS CORRECTAS:")
    for num, data in preguntas.items():
        print(f"\nPregunta {num}: {data['pregunta']}")
        for opcion in data['opciones']:
            marca = "‚úì" if opcion.startswith(data['respuesta_correcta']) else " "
            print(f"  [{marca}] {opcion}")
        print(f"üí° Explicaci√≥n: {data['explicacion']}")

def checklist_consolidacion():
    """Checklist completo de consolidaci√≥n del m√≥dulo"""
    
    print("\nüéØ CHECKLIST DE CONSOLIDACI√ìN - M√ìDULO 3.2")
    print("=" * 60)
    
    checklist_items = [
        "‚úÖ Configuraci√≥n correcta del entorno (Python + SQLite + Pandas)",
        "‚úÖ Comprensi√≥n de conexiones y context managers",
        "‚úÖ Dominio de operaciones CRUD (Create, Read, Update, Delete)",
        "‚úÖ Implementaci√≥n de esquemas industriales realistas",
        "‚úÖ Integraci√≥n efectiva de SQLite con Pandas",
        "‚úÖ An√°lisis estad√≠stico de datos industriales",
        "‚úÖ Sistema completo de gesti√≥n de alarmas",
        "‚úÖ Implementaci√≥n del patr√≥n DAO",
        "‚úÖ Optimizaci√≥n de consultas con √≠ndices",
        "‚úÖ Sistema de respaldos autom√°ticos",
        "‚úÖ Generaci√≥n de reportes autom√°ticos",
        "‚úÖ Exportaci√≥n de datos a Excel",
        "‚úÖ Detecci√≥n de valores at√≠picos y anomal√≠as",
        "‚úÖ Dashboard industrial integrado",
        "‚úÖ Manejo profesional de errores y excepciones",
        "‚úÖ Implementaci√≥n de buenas pr√°cticas de seguridad"
    ]
    
    print("üìã CONOCIMIENTOS CONSOLIDADOS:")
    for item in checklist_items:
        print(f"  {item}")
    
    print(f"\nüèÜ TOTAL OBJETIVOS COMPLETADOS: {len(checklist_items)}/16")
    print("\nüéì NIVEL DE COMPETENCIA: AVANZADO")
    print("üìà PREPARACI√ìN PARA M√ìDULO 3.3: 100% LISTO")

=================================================================
10. FUNCI√ìN PRINCIPAL DE DEMOSTRACI√ìN
=================================================================

def main():
    """Funci√≥n principal que demuestra todos los conceptos del m√≥dulo"""
    
    print("üêçüóÑÔ∏è M√ìDULO 3.2: PYTHON + SQLITE - DEMOSTRACI√ìN COMPLETA")
    print("=" * 70)
    
    try:
        # 1. Crear sistema de demostraci√≥n
        print("\n1Ô∏è‚É£ CREANDO SISTEMA DE DEMOSTRACI√ìN...")
        demo_rapida_sistema_industrial()
        
        # 2. An√°lisis con Pandas
        print("\n2Ô∏è‚É£ AN√ÅLISIS CON PANDAS...")
        df_datos = demo_pandas_sqlite()
        
        # 3. Generar reportes
        print("\n3Ô∏è‚É£ GENERANDO REPORTES...")
        reporte = generar_reporte_operacional()
        archivo_reporte = exportar_reporte_excel(reporte)
        
        # 4. Ejecutar ejercicios
        print("\n4Ô∏è‚É£ EJERCICIOS PR√ÅCTICOS...")
        ejercicio_basico_conexion()
        ejercicio_intermedio_pandas()
        dashboard, reporte_dashboard = ejercicio_avanzado_dashboard()
        
        # 5. Evaluaci√≥n
        print("\n5Ô∏è‚É£ EVALUACI√ìN Y CONSOLIDACI√ìN...")
        cuestionario_evaluacion()
        checklist_consolidacion()
        
        print("\n" + "="*70)
        print("üéâ ¬°M√ìDULO 3.2 COMPLETAMENTE DEMOSTRADO!")
        print("="*70)
        print("üöÄ Siguiente etapa: M√≥dulo 3.3 - ORM con SQLAlchemy")
        print("üìö Ya tienes las bases s√≥lidas para frameworks avanzados de ORM")
        print("üí™ ¬°Excelente trabajo siguiendo la metodolog√≠a de aprendizaje deliberado!")
        
    except Exception as e:
        print(f"‚ùå Error en demostraci√≥n: {e}")
        print("üîß Revisa la configuraci√≥n del entorno y las dependencias")

if __name__ == "__main__":
    main()

=================================================================
üéì CONCLUSI√ìN DEL M√ìDULO 3.2
=================================================================

"""
¬°FELICIDADES! Has completado exitosamente el M√≥dulo 3.2: Python + SQLite.

üèÜ LOGROS ALCANZADOS:
- Integraci√≥n completa de Python con SQLite
- Manejo profesional de conexiones y transacciones
- An√°lisis h√≠brido con Pandas
- Generaci√≥n autom√°tica de reportes
- Implementaci√≥n de patrones de dise√±o para bases de datos
- Sistema industrial completo funcional

üöÄ PREPARACI√ìN PARA EL SIGUIENTE NIVEL:
- Tienes las bases s√≥lidas para ORM avanzados
- Comprendes la integraci√≥n SQL-Python
- Dominas el an√°lisis de datos industriales
- Implementas buenas pr√°cticas profesionales

üìà PR√ìXIMO M√ìDULO: 3.3 - ORM con SQLAlchemy
- Object-Relational Mapping avanzado
- Modelos declarativos
- Migraciones autom√°ticas
- Consultas complejas con ORM
- Optimizaci√≥n de performance con ORM

¬°Contin√∫a con esta excelente metodolog√≠a de aprendizaje deliberado!
"""
