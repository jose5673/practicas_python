"""
üêçüóÑÔ∏è M√ìDULO 3.3: ORM CON SQLALCHEMY - PARTE 3
üìä MODELOS AVANZADOS Y RELACIONES COMPLEJAS
üìà Maestr√≠a en Python - Fase 3: Gesti√≥n Avanzada de Datos

=================================================================
OBJETIVO PRINCIPAL: Dominar relaciones complejas y consultas avanzadas con SQLAlchemy ORM
=================================================================

Esta parte del m√≥dulo 3.3 se enfoca en las capacidades avanzadas de SQLAlchemy:
- Relaciones One-to-Many y Many-to-Many
- Herencia de modelos
- Consultas complejas y optimizaci√≥n
- Lazy loading vs Eager loading
- Transacciones avanzadas
- Casos de uso industriales complejos

üìã CONTENIDO DE LA PARTE 3:
=========================

1. RELACIONES ENTRE MODELOS
   - One-to-Many (1:N)
   - Many-to-Many (N:M)
   - One-to-One (1:1)
   - Self-referencing relationships

2. HERENCIA DE MODELOS
   - Single Table Inheritance
   - Joined Table Inheritance
   - Concrete Table Inheritance

3. CONSULTAS AVANZADAS
   - Joins complejos
   - Subconsultas
   - Funciones de agregaci√≥n
   - Window functions

4. OPTIMIZACI√ìN DE PERFORMANCE
   - Lazy vs Eager loading
   - Query optimization
   - √çndices personalizados
   - Bulk operations

5. TRANSACCIONES AVANZADAS
   - ACID properties
   - Savepoints
   - Rollback strategies
   - Connection pooling

=================================================================
TEOR√çA FUNDAMENTAL: RELACIONES EN ORM
=================================================================

Las relaciones son la esencia de las bases de datos relacionales.
SQLAlchemy ORM proporciona una abstracci√≥n poderosa para manejar
estas relaciones de manera intuitiva y eficiente.

"""

from sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, Boolean, ForeignKey, Table, Text, Enum
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship, backref, joinedload, selectinload, Session
from sqlalchemy.sql import func
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
import enum
from contextlib import contextmanager

# Configuraci√≥n base
Base = declarative_base()
engine = create_engine('sqlite:///sistema_industrial_avanzado.db', echo=False)
Session = sessionmaker(bind=engine)

"""
=================================================================
1. RELACIONES ONE-TO-MANY (1:N)
=================================================================

La relaci√≥n m√°s com√∫n en sistemas industriales: un elemento padre
puede tener m√∫ltiples elementos hijos.

Ejemplo: Una Planta Industrial tiene m√∫ltiples Sensores
"""

class PlantaIndustrial(Base):
    """Modelo de Planta Industrial - Lado 'One' de la relaci√≥n"""
    __tablename__ = 'plantas_industriales'
    
    id = Column(Integer, primary_key=True)
    nombre = Column(String(100), nullable=False)
    ubicacion = Column(String(200))
    tipo_industria = Column(String(50))
    capacidad_produccion = Column(Float)
    fecha_inauguracion = Column(DateTime)
    activa = Column(Boolean, default=True)
    
    # Relaci√≥n One-to-Many: Una planta tiene muchos sensores
    sensores = relationship("SensorAvanzado", back_populates="planta", cascade="all, delete-orphan")
    # cascade="all, delete-orphan" significa que si eliminas la planta, se eliminan todos sus sensores
    
    # Relaci√≥n One-to-Many: Una planta tiene muchas l√≠neas de producci√≥n
    lineas_produccion = relationship("LineaProduccion", back_populates="planta")
    
    def __repr__(self):
        return f"<PlantaIndustrial(nombre='{self.nombre}', sensores={len(self.sensores)})>"

class SensorAvanzado(Base):
    """Modelo de Sensor - Lado 'Many' de la relaci√≥n"""
    __tablename__ = 'sensores_avanzados'
    
    id = Column(Integer, primary_key=True)
    nombre = Column(String(100), nullable=False)
    tipo = Column(String(50))
    ubicacion_especifica = Column(String(200))
    unidad_medida = Column(String(20))
    valor_min = Column(Float)
    valor_max = Column(Float)
    precision = Column(Float, default=0.01)
    frecuencia_lectura = Column(Integer, default=60)  # segundos
    
    # Foreign Key hacia la planta
    planta_id = Column(Integer, ForeignKey('plantas_industriales.id'), nullable=False)
    
    # Relaci√≥n Many-to-One: Muchos sensores pertenecen a una planta
    planta = relationship("PlantaIndustrial", back_populates="sensores")
    
    # Relaci√≥n One-to-Many: Un sensor tiene muchas lecturas
    lecturas = relationship("LecturaAvanzada", back_populates="sensor", cascade="all, delete-orphan")
    
    def __repr__(self):
        return f"<SensorAvanzado(nombre='{self.nombre}', planta='{self.planta.nombre if self.planta else None}')>"

"""
=================================================================
2. RELACIONES MANY-TO-MANY (N:M)
=================================================================

Cuando ambos lados de la relaci√≥n pueden tener m√∫ltiples elementos
del otro lado. Requiere una tabla de asociaci√≥n.

Ejemplo: T√©cnicos pueden trabajar en m√∫ltiples Plantas,
y una Planta puede tener m√∫ltiples T√©cnicos
"""

# Tabla de asociaci√≥n para la relaci√≥n Many-to-Many
tecnico_planta_asociacion = Table(
    'tecnico_planta',
    Base.metadata,
    Column('tecnico_id', Integer, ForeignKey('tecnicos.id'), primary_key=True),
    Column('planta_id', Integer, ForeignKey('plantas_industriales.id'), primary_key=True),
    Column('fecha_asignacion', DateTime, default=datetime.utcnow),
    Column('rol_en_planta', String(50), default='T√©cnico General')
)

class Tecnico(Base):
    """Modelo de T√©cnico especializado"""
    __tablename__ = 'tecnicos'
    
    id = Column(Integer, primary_key=True)
    nombre = Column(String(100), nullable=False)
    apellido = Column(String(100), nullable=False)
    especialidad = Column(String(100))
    nivel_experiencia = Column(String(20))  # Junior, Senior, Expert
    telefono = Column(String(20))
    email = Column(String(100))
    activo = Column(Boolean, default=True)
    
    # Relaci√≥n Many-to-Many: Un t√©cnico puede trabajar en m√∫ltiples plantas
    plantas_asignadas = relationship(
        "PlantaIndustrial",
        secondary=tecnico_planta_asociacion,
        backref=backref("tecnicos_asignados", lazy="select")
    )
    
    def __repr__(self):
        return f"<Tecnico(nombre='{self.nombre} {self.apellido}', especialidad='{self.especialidad}')>"

"""
=================================================================
3. HERENCIA DE MODELOS
=================================================================

SQLAlchemy soporta tres tipos de herencia:
1. Single Table Inheritance: Todas las clases en una tabla
2. Joined Table Inheritance: Cada clase tiene su tabla
3. Concrete Table Inheritance: Tablas completamente separadas
"""

# Enum para tipos de equipos
class TipoEquipo(enum.Enum):
    SENSOR = "sensor"
    ACTUADOR = "actuador"
    CONTROLADOR = "controlador"
    MOTOR = "motor"
    BOMBA = "bomba"

# Single Table Inheritance - Todas las clases hijas en una tabla
class EquipoIndustrial(Base):
    """Clase base para todos los equipos industriales"""
    __tablename__ = 'equipos_industriales'
    
    id = Column(Integer, primary_key=True)
    nombre = Column(String(100), nullable=False)
    modelo = Column(String(100))
    fabricante = Column(String(100))
    numero_serie = Column(String(100), unique=True)
    fecha_instalacion = Column(DateTime)
    estado_operativo = Column(String(20), default='Operativo')
    
    # Discriminator para Single Table Inheritance
    tipo_equipo = Column(Enum(TipoEquipo))
    
    # Foreign Key hacia la l√≠nea de producci√≥n
    linea_produccion_id = Column(Integer, ForeignKey('lineas_produccion.id'))
    linea_produccion = relationship("LineaProduccion", back_populates="equipos")
    
    __mapper_args__ = {
        'polymorphic_identity': TipoEquipo.SENSOR,
        'polymorphic_on': tipo_equipo
    }
    
    def __repr__(self):
        return f"<EquipoIndustrial(nombre='{self.nombre}', tipo='{self.tipo_equipo}')>"

class SensorEspecializado(EquipoIndustrial):
    """Sensor especializado que hereda de EquipoIndustrial"""
    
    # Campos espec√≠ficos de sensores
    tipo_sensor = Column(String(50))  # Temperatura, Presi√≥n, Vibraci√≥n, etc.
    rango_medicion = Column(String(50))
    precision_especificada = Column(Float)
    protocolo_comunicacion = Column(String(50))  # Modbus, OPC-UA, etc.
    
    __mapper_args__ = {
        'polymorphic_identity': TipoEquipo.SENSOR,
    }

class MotorIndustrial(EquipoIndustrial):
    """Motor industrial que hereda de EquipoIndustrial"""
    
    # Campos espec√≠ficos de motores
    potencia_kw = Column(Float)
    voltaje_operacion = Column(Float)
    velocidad_rpm = Column(Integer)
    tipo_motor = Column(String(50))  # AC, DC, Servo, etc.
    eficiencia_energetica = Column(Float)
    
    __mapper_args__ = {
        'polymorphic_identity': TipoEquipo.MOTOR,
    }

"""
=================================================================
4. MODELOS CON RELACIONES COMPLEJAS
=================================================================
"""

class LineaProduccion(Base):
    """L√≠nea de producci√≥n con m√∫ltiples relaciones"""
    __tablename__ = 'lineas_produccion'
    
    id = Column(Integer, primary_key=True)
    nombre = Column(String(100), nullable=False)
    descripcion = Column(Text)
    capacidad_hora = Column(Float)  # unidades por hora
    eficiencia_objetivo = Column(Float, default=85.0)  # porcentaje
    estado = Column(String(20), default='Activa')
    
    # Foreign Key hacia la planta
    planta_id = Column(Integer, ForeignKey('plantas_industriales.id'), nullable=False)
    
    # Relaciones
    planta = relationship("PlantaIndustrial", back_populates="lineas_produccion")
    equipos = relationship("EquipoIndustrial", back_populates="linea_produccion")
    turnos_produccion = relationship("TurnoProduccion", back_populates="linea")
    
    def __repr__(self):
        return f"<LineaProduccion(nombre='{self.nombre}', equipos={len(self.equipos)})>"

class TurnoProduccion(Base):
    """Turnos de producci√≥n con datos de performance"""
    __tablename__ = 'turnos_produccion'
    
    id = Column(Integer, primary_key=True)
    fecha_inicio = Column(DateTime, nullable=False)
    fecha_fin = Column(DateTime)
    supervisor = Column(String(100))
    unidades_producidas = Column(Integer, default=0)
    unidades_defectuosas = Column(Integer, default=0)
    tiempo_paro = Column(Integer, default=0)  # minutos
    observaciones = Column(Text)
    
    # Foreign Key hacia l√≠nea de producci√≥n
    linea_id = Column(Integer, ForeignKey('lineas_produccion.id'), nullable=False)
    
    # Relaciones
    linea = relationship("LineaProduccion", back_populates="turnos_produccion")
    
    @property
    def eficiencia_calculada(self):
        """Calcula la eficiencia del turno"""
        if not self.fecha_fin or not self.fecha_inicio:
            return 0.0
        
        duracion_total = (self.fecha_fin - self.fecha_inicio).total_seconds() / 60  # minutos
        tiempo_productivo = duracion_total - self.tiempo_paro
        
        if tiempo_productivo <= 0:
            return 0.0
        
        return (self.unidades_producidas / (tiempo_productivo / 60) / self.linea.capacidad_hora) * 100

class LecturaAvanzada(Base):
    """Lecturas de sensores con datos enriquecidos"""
    __tablename__ = 'lecturas_avanzadas'
    
    id = Column(Integer, primary_key=True)
    valor = Column(Float, nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)
    calidad_senal = Column(Float, default=100.0)  # porcentaje
    estado_sensor = Column(String(20), default='Normal')
    procesado = Column(Boolean, default=False)
    
    # Foreign Key hacia sensor
    sensor_id = Column(Integer, ForeignKey('sensores_avanzados.id'), nullable=False)
    
    # Relaci√≥n
    sensor = relationship("SensorAvanzado", back_populates="lecturas")
    
    def __repr__(self):
        return f"<LecturaAvanzada(sensor='{self.sensor.nombre}', valor={self.valor})>"

"""
=================================================================
5. GESTORES DE DATOS AVANZADOS
=================================================================
"""

class GestorPlantasIndustriales:
    """Gestor avanzado para plantas industriales con relaciones complejas"""
    
    def __init__(self, session: Session):
        self.session = session
    
    def crear_planta_completa(self, datos_planta: Dict[str, Any]) -> PlantaIndustrial:
        """Crea una planta con todos sus componentes"""
        
        # Crear la planta
        planta = PlantaIndustrial(
            nombre=datos_planta['nombre'],
            ubicacion=datos_planta['ubicacion'],
            tipo_industria=datos_planta['tipo_industria'],
            capacidad_produccion=datos_planta.get('capacidad_produccion', 1000),
            fecha_inauguracion=datos_planta.get('fecha_inauguracion', datetime.utcnow())
        )
        
        self.session.add(planta)
        self.session.flush()  # Para obtener el ID sin hacer commit
        
        # Crear l√≠neas de producci√≥n
        for linea_data in datos_planta.get('lineas_produccion', []):
            linea = LineaProduccion(
                nombre=linea_data['nombre'],
                descripcion=linea_data.get('descripcion', ''),
                capacidad_hora=linea_data.get('capacidad_hora', 100),
                planta_id=planta.id
            )
            self.session.add(linea)
            self.session.flush()
            
            # Crear sensores para la l√≠nea
            for sensor_data in linea_data.get('sensores', []):
                sensor = SensorAvanzado(
                    nombre=sensor_data['nombre'],
                    tipo=sensor_data['tipo'],
                    ubicacion_especifica=sensor_data.get('ubicacion', ''),
                    unidad_medida=sensor_data.get('unidad', 'unidades'),
                    valor_min=sensor_data.get('valor_min', 0),
                    valor_max=sensor_data.get('valor_max', 100),
                    planta_id=planta.id
                )
                self.session.add(sensor)
        
        self.session.commit()
        return planta
    
    def obtener_resumen_planta(self, planta_id: int) -> Dict[str, Any]:
        """Obtiene un resumen completo de la planta con todas sus relaciones"""
        
        # Usar joinedload para cargar las relaciones de una vez (Eager loading)
        planta = self.session.query(PlantaIndustrial)\
            .options(
                joinedload(PlantaIndustrial.sensores),
                joinedload(PlantaIndustrial.lineas_produccion),
                joinedload(PlantaIndustrial.tecnicos_asignados)
            )\
            .filter(PlantaIndustrial.id == planta_id)\
            .first()
        
        if not planta:
            return {}
        
        return {
            'planta': {
                'id': planta.id,
                'nombre': planta.nombre,
                'ubicacion': planta.ubicacion,
                'tipo_industria': planta.tipo_industria,
                'activa': planta.activa
            },
            'estadisticas': {
                'total_sensores': len(planta.sensores),
                'total_lineas': len(planta.lineas_produccion),
                'total_tecnicos': len(planta.tecnicos_asignados),
                'sensores_por_tipo': self._contar_sensores_por_tipo(planta.sensores)
            },
            'lineas_produccion': [
                {
                    'nombre': linea.nombre,
                    'capacidad_hora': linea.capacidad_hora,
                    'total_equipos': len(linea.equipos)
                }
                for linea in planta.lineas_produccion
            ]
        }
    
    def _contar_sensores_por_tipo(self, sensores: List[SensorAvanzado]) -> Dict[str, int]:
        """Cuenta sensores por tipo"""
        conteo = {}
        for sensor in sensores:
            tipo = sensor.tipo or 'Sin especificar'
            conteo[tipo] = conteo.get(tipo, 0) + 1
        return conteo
    
    def asignar_tecnico_planta(self, tecnico_id: int, planta_id: int, rol: str = 'T√©cnico General'):
        """Asigna un t√©cnico a una planta (relaci√≥n Many-to-Many)"""
        
        tecnico = self.session.query(Tecnico).get(tecnico_id)
        planta = self.session.query(PlantaIndustrial).get(planta_id)
        
        if not tecnico or not planta:
            raise ValueError("T√©cnico o planta no encontrados")
        
        # Verificar si ya est√° asignado
        if planta in tecnico.plantas_asignadas:
            print(f"El t√©cnico {tecnico.nombre} ya est√° asignado a {planta.nombre}")
            return False
        
        # Asignar la relaci√≥n
        tecnico.plantas_asignadas.append(planta)
        self.session.commit()
        
        print(f"‚úÖ T√©cnico {tecnico.nombre} asignado a planta {planta.nombre}")
        return True

"""
=================================================================
6. CONSULTAS AVANZADAS CON ORM
=================================================================
"""

class ConsultasAvanzadas:
    """Clase con ejemplos de consultas complejas usando SQLAlchemy ORM"""
    
    def __init__(self, session: Session):
        self.session = session
    
    def plantas_con_mas_sensores(self, limite: int = 5) -> List[Dict[str, Any]]:
        """Obtiene las plantas con m√°s sensores usando subconsultas"""
        
        resultado = self.session.query(
            PlantaIndustrial.nombre,
            PlantaIndustrial.ubicacion,
            func.count(SensorAvanzado.id).label('total_sensores')
        ).join(SensorAvanzado)\
        .group_by(PlantaIndustrial.id)\
        .order_by(func.count(SensorAvanzado.id).desc())\
        .limit(limite)\
        .all()
        
        return [
            {
                'nombre': r.nombre,
                'ubicacion': r.ubicacion,
                'total_sensores': r.total_sensores
            }
            for r in resultado
        ]
    
    def eficiencia_promedio_por_linea(self) -> List[Dict[str, Any]]:
        """Calcula eficiencia promedio por l√≠nea de producci√≥n"""
        
        # Subconsulta para calcular eficiencia por turno
        subquery = self.session.query(
            TurnoProduccion.linea_id,
            TurnoProduccion.id,
            TurnoProduccion.unidades_producidas,
            TurnoProduccion.tiempo_paro,
            func.julianday(TurnoProduccion.fecha_fin) - func.julianday(TurnoProduccion.fecha_inicio).label('duracion_dias'),
            LineaProduccion.capacidad_hora
        ).join(LineaProduccion)\
        .filter(TurnoProduccion.fecha_fin.isnot(None))\
        .subquery()
        
        # Consulta principal con c√°lculo de eficiencia
        resultado = self.session.query(
            LineaProduccion.nombre,
            func.avg(
                (subquery.c.unidades_producidas / 
                 ((subquery.c.duracion_dias * 24 * 60 - subquery.c.tiempo_paro) / 60) /
                 subquery.c.capacidad_hora) * 100
            ).label('eficiencia_promedio')
        ).join(subquery, LineaProduccion.id == subquery.c.linea_id)\
        .group_by(LineaProduccion.id)\
        .all()
        
        return [
            {
                'linea': r.nombre,
                'eficiencia_promedio': round(r.eficiencia_promedio, 2)
            }
            for r in resultado
        ]
    
    def sensores_con_lecturas_anomalas(self, dias_atras: int = 7) -> List[Dict[str, Any]]:
        """Identifica sensores con lecturas fuera de rango"""
        
        fecha_limite = datetime.utcnow() - timedelta(days=dias_atras)
        
        resultado = self.session.query(
            SensorAvanzado.nombre,
            SensorAvanzado.tipo,
            PlantaIndustrial.nombre.label('planta'),
            func.count(LecturaAvanzada.id).label('lecturas_anomalas'),
            func.avg(LecturaAvanzada.valor).label('valor_promedio')
        ).join(LecturaAvanzada)\
        .join(PlantaIndustrial)\
        .filter(
            LecturaAvanzada.timestamp >= fecha_limite,
            # Lecturas fuera del rango permitido
            (LecturaAvanzada.valor < SensorAvanzado.valor_min) |
            (LecturaAvanzada.valor > SensorAvanzado.valor_max)
        ).group_by(SensorAvanzado.id)\
        .having(func.count(LecturaAvanzada.id) > 5)\
        .order_by(func.count(LecturaAvanzada.id).desc())\
        .all()
        
        return [
            {
                'sensor': r.nombre,
                'tipo': r.tipo,
                'planta': r.planta,
                'lecturas_anomalas': r.lecturas_anomalas,
                'valor_promedio': round(r.valor_promedio, 2)
            }
            for r in resultado
        ]
    
    def ranking_tecnicos_por_plantas(self) -> List[Dict[str, Any]]:
        """Ranking de t√©cnicos por n√∫mero de plantas asignadas"""
        
        resultado = self.session.query(
            Tecnico.nombre,
            Tecnico.apellido,
            Tecnico.especialidad,
            func.count(tecnico_planta_asociacion.c.planta_id).label('plantas_asignadas')
        ).join(tecnico_planta_asociacion)\
        .group_by(Tecnico.id)\
        .order_by(func.count(tecnico_planta_asociacion.c.planta_id).desc())\
        .all()
        
        return [
            {
                'tecnico': f"{r.nombre} {r.apellido}",
                'especialidad': r.especialidad,
                'plantas_asignadas': r.plantas_asignadas
            }
            for r in resultado
        ]

"""
=================================================================
7. OPTIMIZACI√ìN Y PERFORMANCE
=================================================================
"""

class OptimizadorPerformance:
    """T√©cnicas de optimizaci√≥n para consultas complejas"""
    
    def __init__(self, session: Session):
        self.session = session
    
    def ejemplo_lazy_vs_eager_loading(self):
        """Demuestra la diferencia entre lazy y eager loading"""
        
        print("üîç COMPARACI√ìN: LAZY vs EAGER LOADING")
        print("=" * 50)
        
        # LAZY LOADING (por defecto) - N+1 queries problem
        print("\n1Ô∏è‚É£ LAZY LOADING (problem√°tico):")
        plantas_lazy = self.session.query(PlantaIndustrial).all()
        
        for planta in plantas_lazy[:3]:  # Solo primeras 3 para demo
            print(f"Planta: {planta.nombre}")
            # Cada acceso a sensores genera una nueva query (N+1 problem)
            print(f"  Sensores: {len(planta.sensores)}")  # Query adicional aqu√≠
        
        # EAGER LOADING - Una sola query optimizada
        print("\n2Ô∏è‚É£ EAGER LOADING (optimizado):")
        plantas_eager = self.session.query(PlantaIndustrial)\
            .options(joinedload(PlantaIndustrial.sensores))\
            .all()
        
        for planta in plantas_eager[:3]:
            print(f"Planta: {planta.nombre}")
            print(f"  Sensores: {len(planta.sensores)}")  # Sin queries adicionales
    
    def consulta_optimizada_dashboard(self) -> Dict[str, Any]:
        """Consulta optimizada para dashboard industrial"""
        
        # Una sola query que obtiene todo lo necesario
        resultado = self.session.query(PlantaIndustrial)\
            .options(
                joinedload(PlantaIndustrial.sensores).joinedload(SensorAvanzado.lecturas),
                joinedload(PlantaIndustrial.lineas_produccion).joinedload(LineaProduccion.equipos),
                selectinload(PlantaIndustrial.tecnicos_asignados)
            )\
            .filter(PlantaIndustrial.activa == True)\
            .all()
        
        dashboard_data = {
            'total_plantas': len(resultado),
            'total_sensores': sum(len(p.sensores) for p in resultado),
            'total_lineas': sum(len(p.lineas_produccion) for p in resultado),
            'plantas_detalle': []
        }
        
        for planta in resultado:
            dashboard_data['plantas_detalle'].append({
                'nombre': planta.nombre,
                'sensores_activos': len([s for s in planta.sensores if s.lecturas]),
                'lineas_operativas': len([l for l in planta.lineas_produccion if l.estado == 'Activa']),
                'tecnicos_asignados': len(planta.tecnicos_asignados)
            })
        
        return dashboard_data
    
    def bulk_operations_ejemplo(self):
        """Demuestra operaciones en lote para mejor performance"""
        
        print("\nüöÄ BULK OPERATIONS PARA PERFORMANCE")
        print("=" * 40)
        
        # Bulk insert - insertar m√∫ltiples registros de una vez
        lecturas_bulk = []
        fecha_base = datetime.utcnow()
        
        # Crear 1000 lecturas de ejemplo
        sensores = self.session.query(SensorAvanzado).limit(10).all()
        
        for i in range(1000):
            for sensor in sensores:
                lecturas_bulk.append({
                    'sensor_id': sensor.id,
                    'valor': 20 + (i % 60),  # Valores simulados
                    'timestamp': fecha_base + timedelta(minutes=i),
                    'calidad_senal': 95.0 + (i % 10)
                })
        
        # Inserci√≥n en lote (mucho m√°s r√°pido que inserts individuales)
        self.session.bulk_insert_mappings(LecturaAvanzada, lecturas_bulk)
        self.session.commit()
        
        print(f"‚úÖ Insertadas {len(lecturas_bulk)} lecturas en lote")
        
        # Bulk update - actualizar m√∫ltiples registros
        filas_actualizadas = self.session.query(LecturaAvanzada)\
            .filter(LecturaAvanzada.procesado == False)\
            .update({LecturaAvanzada.procesado: True})
        
        self.session.commit()
        print(f"‚úÖ Actualizadas {filas_actualizadas} lecturas como procesadas")

"""
=================================================================
8. EJERCICIOS PR√ÅCTICOS PARTE 3
=================================================================
"""

def ejercicio_basico_relaciones():
    """Ejercicio b√°sico: Crear y consultar relaciones One-to-Many"""
    
    print("\nüéØ EJERCICIO B√ÅSICO: Relaciones One-to-Many")
    print("=" * 50)
    
    with get_session() as session:
        gestor = GestorPlantasIndustriales(session)
        
        # Crear una planta con l√≠neas y sensores
        datos_planta = {
            'nombre': 'Planta Ejercicio B√°sico',
            'ubicacion': 'Industrial Park Norte',
            'tipo_industria': 'Automotriz',
            'lineas_produccion': [
                {
                    'nombre': 'L√≠nea de Ensamble',
                    'capacidad_hora': 50,
                    'sensores': [
                        {'nombre': 'Temp-Motor-01', 'tipo': 'Temperatura', 'valor_min': 20, 'valor_max': 80},
                        {'nombre': 'Presion-Hidraulica-01', 'tipo': 'Presi√≥n', 'valor_min': 5, 'valor_max': 25}
                    ]
                }
            ]
        }
        
        planta = gestor.crear_planta_completa(datos_planta)
        print(f"‚úÖ Planta creada: {planta.nombre}")
        
        # Consultar las relaciones
        resumen = gestor.obtener_resumen_planta(planta.id)
        print(f"üìä Resumen de planta:")
        print(f"  - Sensores: {resumen['estadisticas']['total_sensores']}")
        print(f"  - L√≠neas: {resumen['estadisticas']['total_lineas']}")

def ejercicio_intermedio_many_to_many():
    """Ejercicio intermedio: Relaciones Many-to-Many"""
    
    print("\nüéØ EJERCICIO INTERMEDIO: Relaciones Many-to-Many")
    print("=" * 55)
    
    with get_session() as session:
        gestor = GestorPlantasIndustriales(session)
        
        # Crear t√©cnicos
        tecnicos_data = [
            {'nombre': 'Carlos', 'apellido': 'Rodriguez', 'especialidad': 'Mec√°nica Industrial'},
            {'nombre': 'Ana', 'apellido': 'Martinez', 'especialidad': 'Electricidad'},
            {'nombre': 'Luis', 'apellido': 'Garcia', 'especialidad': 'Automatizaci√≥n'}
        ]
        
        tecnicos = []
        for data in tecnicos_data:
            tecnico = Tecnico(**data)
            session.add(tecnico)
            tecnicos.append(tecnico)
        
        session.commit()
        
        # Obtener plantas existentes
        plantas = session.query(PlantaIndustrial).limit(2).all()
        
        # Asignar t√©cnicos a plantas (relaci√≥n Many-to-Many)
        for i, tecnico in enumerate(tecnicos):
            for j, planta in enumerate(plantas):
                if (i + j) % 2 == 0:  # Asignaci√≥n parcial para demostrar
                    gestor.asignar_tecnico_planta(tecnico.id, planta.id)
        
        # Consultar las asignaciones
        consultas = ConsultasAvanzadas(session)
        ranking = consultas.ranking_tecnicos_por_plantas()
        
        print("üë• Ranking de t√©cnicos por plantas asignadas:")
        for tecnico_info in ranking:
            print(f"  {tecnico_info['tecnico']}: {tecnico_info['plantas_asignadas']} plantas")

def ejercicio_avanzado_consultas_complejas():
    """Ejercicio avanzado: Consultas complejas y optimizaci√≥n"""
    
    print("\nüéØ EJERCICIO AVANZADO: Consultas Complejas")
    print("=" * 50)
    
    with get_session() as session:
        consultas = ConsultasAvanzadas(session)
        optimizador = OptimizadorPerformance(session)
        
        # 1. An√°lisis de plantas con m√°s sensores
        print("\n1Ô∏è‚É£ Plantas con m√°s sensores:")
        top_plantas = consultas.plantas_con_mas_sensores(3)
        for planta in top_plantas:
            print(f"  {planta['nombre']}: {planta['total_sensores']} sensores")
        
        # 2. Identificar sensores con lecturas an√≥malas
        print("\n2Ô∏è‚É£ Sensores con lecturas an√≥malas:")
        sensores_anomalos = consultas.sensores_con_lecturas_anomalas(30)
        for sensor in sensores_anomalos[:3]:
            print(f"  {sensor['sensor']}: {sensor['lecturas_anomalas']} lecturas an√≥malas")
        
        # 3. Dashboard optimizado
        print("\n3Ô∏è‚É£ Dashboard optimizado:")
        dashboard = optimizador.consulta_optimizada_dashboard()
        print(f"  Total plantas: {dashboard['total_plantas']}")
        print(f"  Total sensores: {dashboard['total_sensores']}")
        print(f"  Total l√≠neas: {dashboard['total_lineas']}")
        
        # 4. Demostrar performance optimization
        optimizador.ejemplo_lazy_vs_eager_loading()

"""
=================================================================
9. UTILIDADES Y HELPERS
=================================================================
"""

@contextmanager
def get_session():
    """Context manager para sesiones de SQLAlchemy"""
    session = Session()
    try:
        yield session
        session.commit()
    except Exception as e:
        session.rollback()
        raise
    finally:
        session.close()

def crear_schema_completo():
    """Crea todas las tablas del esquema avanzado"""
    print("üèóÔ∏è CREANDO ESQUEMA COMPLETO...")
    
    # Crear todas las tablas
    Base.metadata.create_all(engine)
    
    print("‚úÖ Schema creado exitosamente")
    print("üìã Tablas creadas:")
    for table_name in Base.metadata.tables.keys():
        print(f"  - {table_name}")

def poblar_datos_demo():
    """Pobla la base de datos con datos de demostraci√≥n"""
    print("\nüìä POBLANDO DATOS DE DEMOSTRACI√ìN...")
    
    with get_session() as session:
        gestor = GestorPlantasIndustriales(session)
        
        # Datos de plantas de ejemplo
        plantas_demo = [
            {
                'nombre': 'Planta Norte - Automotriz',
                'ubicacion': 'Zona Industrial Norte',
                'tipo_industria': 'Automotriz',
                'capacidad_produccion': 1000,
                'lineas_produccion': [
                    {
                        'nombre': 'L√≠nea de Motores',
                        'capacidad_hora': 25,
                        'sensores': [
                            {'nombre': 'TEMP-MOT-001', 'tipo': 'Temperatura', 'valor_min': 60, 'valor_max': 95},
                            {'nombre': 'VIB-MOT-001', 'tipo': 'Vibraci√≥n', 'valor_min': 0, 'valor_max': 50},
                            {'nombre': 'PRES-OIL-001', 'tipo': 'Presi√≥n', 'valor_min': 2, 'valor_max': 8}
                        ]
                    },
                    {
                        'nombre': 'L√≠nea de Transmisiones',
                        'capacidad_hora': 15,
                        'sensores': [
                            {'nombre': 'TEMP-TRANS-001', 'tipo': 'Temperatura', 'valor_min': 40, 'valor_max': 80},
                            {'nombre': 'TORQUE-TRANS-001', 'tipo': 'Torque', 'valor_min': 100, 'valor_max': 500}
                        ]
                    }
                ]
            },
            {
                'nombre': 'Planta Sur - Qu√≠mica',
                'ubicacion': 'Complejo Petroqu√≠mico Sur',
                'tipo_industria': 'Qu√≠mica',
                'capacidad_produccion': 2000,
                'lineas_produccion': [
                    {
                        'nombre': 'Reactor Principal',
                        'capacidad_hora': 100,
                        'sensores': [
                            {'nombre': 'TEMP-REACT-001', 'tipo': 'Temperatura', 'valor_min': 200, 'valor_max': 350},
                            {'nombre': 'PRES-REACT-001', 'tipo': 'Presi√≥n', 'valor_min': 5, 'valor_max': 15},
                            {'nombre': 'pH-REACT-001', 'tipo': 'pH', 'valor_min': 6.5, 'valor_max': 8.5}
                        ]
                    }
                ]
            }
        ]
        
        # Crear plantas
        for planta_data in plantas_demo:
            planta = gestor.crear_planta_completa(planta_data)
            print(f"‚úÖ Planta creada: {planta.nombre}")
        
        # Crear t√©cnicos de ejemplo
        tecnicos_demo = [
            {'nombre': 'Juan', 'apellido': 'P√©rez', 'especialidad': 'Mec√°nica Industrial', 'nivel_experiencia': 'Senior'},
            {'nombre': 'Mar√≠a', 'apellido': 'Gonz√°lez', 'especialidad': 'Instrumentaci√≥n', 'nivel_experiencia': 'Expert'},
            {'nombre': 'Carlos', 'apellido': 'L√≥pez', 'especialidad': 'Electricidad', 'nivel_experiencia': 'Junior'},
            {'nombre': 'Ana', 'apellido': 'Mart√≠n', 'especialidad': 'Automatizaci√≥n', 'nivel_experiencia': 'Senior'}
        ]
        
        for tecnico_data in tecnicos_demo:
            tecnico = Tecnico(**tecnico_data)
            session.add(tecnico)
        
        session.commit()
        print("üë• T√©cnicos creados exitosamente")

def demo_completa_parte3():
    """Demostraci√≥n completa de la Parte 3"""
    
    print("üêçüóÑÔ∏è M√ìDULO 3.3 - PARTE 3: DEMOSTRACI√ìN COMPLETA")
    print("üîó MODELOS AVANZADOS Y RELACIONES COMPLEJAS")
    print("=" * 70)
    
    try:
        # 1. Crear schema
        crear_schema_completo()
        
        # 2. Poblar datos
        poblar_datos_demo()
        
        # 3. Ejercicios pr√°cticos
        ejercicio_basico_relaciones()
        ejercicio_intermedio_many_to_many()
        ejercicio_avanzado_consultas_complejas()
        
        # 4. Generar lecturas de ejemplo
        print("\nüìà GENERANDO LECTURAS DE EJEMPLO...")
        with get_session() as session:
            optimizador = OptimizadorPerformance(session)
            optimizador.bulk_operations_ejemplo()
        
        print("\n" + "="*70)
        print("üéâ ¬°PARTE 3 COMPLETAMENTE DEMOSTRADA!")
        print("‚úÖ Relaciones One-to-Many, Many-to-Many implementadas")
        print("‚úÖ Herencia de modelos funcionando")
        print("‚úÖ Consultas avanzadas ejecutadas")
        print("‚úÖ Optimizaciones de performance aplicadas")
        print("üöÄ ¬°Listo para la Parte 4: Migrations y Production!")
        
    except Exception as e:
        print(f"‚ùå Error en demostraci√≥n: {e}")
        import traceback
        traceback.print_exc()

"""
=================================================================
10. CUESTIONARIO Y CONSOLIDACI√ìN PARTE 3
=================================================================
"""

def cuestionario_parte3():
    """Cuestionario de evaluaci√≥n para la Parte 3"""
    
    print("\nüìù CUESTIONARIO - M√ìDULO 3.3 PARTE 3")
    print("üîó MODELOS AVANZADOS Y RELACIONES")
    print("=" * 50)
    
    preguntas = {
        1: {
            'pregunta': '¬øQu√© tipo de relaci√≥n necesitas para "Un t√©cnico puede trabajar en m√∫ltiples plantas"?',
            'opciones': [
                'a) One-to-Many',
                'b) Many-to-One',
                'c) Many-to-Many',
                'd) One-to-One'
            ],
            'respuesta_correcta': 'c',
            'explicacion': 'Many-to-Many porque un t√©cnico puede estar en m√∫ltiples plantas Y una planta puede tener m√∫ltiples t√©cnicos.'
        },
        2: {
            'pregunta': '¬øCu√°l es el principal problema del Lazy Loading?',
            'opciones': [
                'a) Usa mucha memoria',
                'b) Problema N+1 queries',
                'c) Es m√°s lento que SQL puro',
                'd) No funciona con relaciones'
            ],
            'respuesta_correcta': 'b',
            'explicacion': 'El problema N+1 ocurre cuando se hace una query inicial y luego N queries adicionales para cada relaci√≥n accedida.'
        },
        3: {
            'pregunta': '¬øQu√© t√©cnica usar√≠as para optimizar la carga de m√∫ltiples relaciones?',
            'opciones': [
                'a) lazy="select"',
                'b) joinedload()',
                'c) query.all()',
                'd) session.commit()'
            ],
            'respuesta_correcta': 'b',
            'explicacion': 'joinedload() usa JOIN para cargar las relaciones en una sola query, evitando el problema N+1.'
        },
        4: {
            'pregunta': '¬øQu√© hace cascade="all, delete-orphan" en una relaci√≥n?',
            'opciones': [
                'a) Mejora el performance',
                'b) Elimina hijos cuando se elimina el padre',
                'c) Crea √≠ndices autom√°ticos',
                'd) Valida los datos'
            ],
            'respuesta_correcta': 'b',
            'explicacion': 'cascade="all, delete-orphan" elimina autom√°ticamente los registros hijos cuando se elimina el padre.'
        },
        5: {
            'pregunta': '¬øCu√°l es la ventaja de bulk_insert_mappings()?',
            'opciones': [
                'a) Mejor validaci√≥n de datos',
                'b) Inserci√≥n masiva eficiente',
                'c) Relaciones autom√°ticas',
                'd) Mejor debugging'
            ],
            'respuesta_correcta': 'b',
            'explicacion': 'bulk_insert_mappings() permite insertar m√∫ltiples registros de una vez, siendo mucho m√°s eficiente que inserts individuales.'
        }
    }
    
    print("‚úÖ RESPUESTAS CORRECTAS:")
    for num, data in preguntas.items():
        print(f"\nPregunta {num}: {data['pregunta']}")
        for opcion in data['opciones']:
            marca = "‚úì" if opcion.startswith(data['respuesta_correcta']) else " "
            print(f"  [{marca}] {opcion}")
        print(f"üí° Explicaci√≥n: {data['explicacion']}")

def checklist_consolidacion_parte3():
    """Checklist de consolidaci√≥n para la Parte 3"""
    
    print("\nüéØ CHECKLIST DE CONSOLIDACI√ìN - PARTE 3")
    print("üîó MODELOS AVANZADOS Y RELACIONES")
    print("=" * 60)
    
    checklist_items = [
        "‚úÖ Comprendo las relaciones One-to-Many (1:N)",
        "‚úÖ Domino las relaciones Many-to-Many (N:M) con tablas de asociaci√≥n",
        "‚úÖ Entiendo la herencia de modelos en SQLAlchemy",
        "‚úÖ S√© cu√°ndo usar Single Table vs Joined Table inheritance",
        "‚úÖ Puedo crear modelos con relaciones complejas",
        "‚úÖ Comprendo el concepto de Foreign Keys en ORM",
        "‚úÖ Manejo relationship() y back_populates correctamente",
        "‚úÖ Entiendo el problema N+1 queries y sus soluciones",
        "‚úÖ Puedo usar joinedload() para optimizar consultas",
        "‚úÖ S√© la diferencia entre lazy y eager loading",
        "‚úÖ Domino consultas avanzadas con joins y subconsultas",
        "‚úÖ Puedo usar funciones de agregaci√≥n (COUNT, AVG, SUM)",
        "‚úÖ Entiendo cascade options (delete-orphan, all, etc.)",
        "‚úÖ Puedo hacer bulk operations para mejor performance",
        "‚úÖ S√© optimizar consultas complejas",
        "‚úÖ Comprendo context managers para sesiones",
        "‚úÖ Puedo crear gestores de datos avanzados",
        "‚úÖ Domino consultas con filtros complejos",
        "‚úÖ Entiendo √≠ndices y optimizaci√≥n de queries",
        "‚úÖ Puedo implementar sistemas industriales complejos con ORM"
    ]
    
    print("üìã CONOCIMIENTOS CONSOLIDADOS:")
    for item in checklist_items:
        print(f"  {item}")
    
    print(f"\nüèÜ TOTAL OBJETIVOS COMPLETADOS: {len(checklist_items)}/20")
    print("\nüéì NIVEL DE COMPETENCIA: EXPERTO EN RELACIONES ORM")
    print("üìà PREPARACI√ìN PARA PARTE 4: 100% LISTO")
    print("üöÄ SIGUIENTE: Migraciones, Testing y Producci√≥n")

"""
=================================================================
FUNCI√ìN PRINCIPAL
=================================================================
"""

def main():
    """Funci√≥n principal de demostraci√≥n de la Parte 3"""
    
    print("üêçüóÑÔ∏è M√ìDULO 3.3 PARTE 3: MODELOS AVANZADOS Y RELACIONES")
    print("=" * 70)
    
    try:
        demo_completa_parte3()
        cuestionario_parte3()
        checklist_consolidacion_parte3()
        
    except Exception as e:
        print(f"‚ùå Error en ejecuci√≥n: {e}")
        print("üîß Verifica que SQLAlchemy est√© instalado: pip install sqlalchemy")

if __name__ == "__main__":
    main()

"""
=================================================================
üéØ RESUMEN DE LA PARTE 3
=================================================================

üìö CONCEPTOS CLAVE APRENDIDOS:
- Relaciones One-to-Many, Many-to-Many, One-to-One
- Herencia de modelos (Single Table, Joined Table)
- Consultas avanzadas con joins y subconsultas
- Optimizaci√≥n de performance (lazy vs eager loading)
- Bulk operations para mejor rendimiento
- Context managers para gesti√≥n de sesiones
- Gestores de datos avanzados

üè≠ APLICACI√ìN INDUSTRIAL:
- Sistema completo de plantas industriales
- Gesti√≥n de sensores con relaciones complejas
- Asignaci√≥n de t√©cnicos a m√∫ltiples plantas
- An√°lisis de performance y eficiencia
- Dashboard industrial optimizado

üöÄ PREPARACI√ìN PARA PARTE 4:
- Migraciones con Alembic
- Testing de modelos ORM
- Configuraci√≥n para producci√≥n
- Monitoreo y logging avanzado
- Deployment de aplicaciones industriales

¬°Excelente progreso en el dominio de SQLAlchemy ORM avanzado!
"""
